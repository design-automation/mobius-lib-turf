{
	"id": 0,
	"name": "mobius-turf",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 650,
			"name": "\"_export\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/_export.ts",
			"sources": [
				{
					"fileName": "_export.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1,
			"name": "\"assert\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/assert.ts",
			"comment": {
				"shortText": "Turf ASSERTIONS functions.\nhttp://turfjs.org/docs/"
			},
			"sources": [
				{
					"fileName": "assert.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 2,
			"name": "\"bbox\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/bbox.ts",
			"comment": {
				"shortText": "Turf bbox functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 9,
					"name": "clip",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 10,
							"name": "clip",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a Feature and a bbox and clips the feature to the bbox using [lineclip] (https://github.com/mapbox/lineclip).\nMay result in degenerate edges when clipping Polygons.",
								"returns": "clipped Feature",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar bbox = [0, 0, 10, 10];\nvar poly = turf.polygon([[[2, 2], [8, 4], [12, 8], [3, 7], [2, 2]]]);\n\nvar clipped = turf.bboxClip(poly, bbox);\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 11,
									"name": "feature",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "feature to clip to the bbox"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "LineString"
											},
											{
												"type": "reference",
												"name": "MultiLineString"
											},
											{
												"type": "reference",
												"name": "Polygon"
											},
											{
												"type": "reference",
												"name": "MultiPolygon"
											}
										]
									}
								},
								{
									"id": 12,
									"name": "bbox",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "extent in [minX, minY, maxX, maxY] order"
									},
									"type": {
										"type": "reference",
										"name": "turf.BBox"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature"
							}
						}
					],
					"sources": [
						{
							"fileName": "bbox.ts",
							"line": 55,
							"character": 20
						}
					]
				},
				{
					"id": 3,
					"name": "polygon",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 4,
							"name": "polygon",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a bbox and returns an equivalent Polygon.",
								"returns": "a Polygon representation of the bounding box",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar bbox = [0, 0, 10, 10];\n\nvar poly = turf.bboxPolygon(bbox);\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 5,
									"name": "bbox",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "extent in [minX, minY, maxX, maxY] order"
									},
									"type": {
										"type": "reference",
										"name": "turf.BBox"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature"
							}
						}
					],
					"sources": [
						{
							"fileName": "bbox.ts",
							"line": 22,
							"character": 23
						}
					]
				},
				{
					"id": 6,
					"name": "square",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 7,
							"name": "square",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a bounding box and calculates the minimum square bounding box that\nwould contain the input.",
								"returns": "a square surrounding `bbox`",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar bbox = [-20, -20, -15, 0];\nvar squared = turf.square(bbox);\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 8,
									"name": "bbox",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "extent in [west, south, east, north] order"
									},
									"type": {
										"type": "reference",
										"name": "turf.BBox"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "turf.BBox"
							}
						}
					],
					"sources": [
						{
							"fileName": "bbox.ts",
							"line": 37,
							"character": 22
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						9,
						3,
						6
					]
				}
			],
			"sources": [
				{
					"fileName": "bbox.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 13,
			"name": "\"bool\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/bool.ts",
			"comment": {
				"shortText": "Turf graphical boolean functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 14,
					"name": "difference",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 15,
							"name": "difference",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Finds the difference between two polygons by clipping the second polygon from the first.",
								"returns": "a Polygon or MultiPolygon feature showing the area of `polygon1` excluding the area of `polygon2` (if empty returns `null`)",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar polygon1 = turf.polygon([[\n  [128, -26],\n  [141, -26],\n  [141, -21],\n  [128, -21],\n  [128, -26]\n]], {\n  \"fill\": \"#F00\",\n  \"fill-opacity\": 0.1\n});\nvar polygon2 = turf.polygon([[\n  [126, -28],\n  [140, -28],\n  [140, -20],\n  [126, -20],\n  [126, -28]\n]], {\n  \"fill\": \"#00F\",\n  \"fill-opacity\": 0.1\n});\n\nvar difference = turf.difference(polygon1, polygon2);\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 16,
									"name": "poly1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input Polygon feature"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Polygon"
											},
											{
												"type": "reference",
												"name": "MultiPolygon"
											}
										]
									}
								},
								{
									"id": 17,
									"name": "poly2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polygon feature to difference from polygon1"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Polygon"
											},
											{
												"type": "reference",
												"name": "MultiPolygon"
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Feature"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "bool.ts",
							"line": 42,
							"character": 26
						}
					]
				},
				{
					"id": 18,
					"name": "intersect",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 19,
							"name": "intersect",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes two Polygon and finds their intersection. If they share a border, returns the border; if they don't intersect, returns undefined.",
								"returns": "returns a feature representing the point(s) they share (in case of a Point  or MultiPoint), the borders they share (in case of a LineString or a MultiLineString), the area they share (in case of Polygon or MultiPolygon). If they do not share any point, returns `null`.",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar poly1 = turf.polygon([[\n  [-122.801742, 45.48565],\n  [-122.801742, 45.60491],\n  [-122.584762, 45.60491],\n  [-122.584762, 45.48565],\n  [-122.801742, 45.48565]\n]]);\n\nvar poly2 = turf.polygon([[\n  [-122.520217, 45.535693],\n  [-122.64038, 45.553967],\n  [-122.720031, 45.526554],\n  [-122.669906, 45.507309],\n  [-122.723464, 45.446643],\n  [-122.532577, 45.408574],\n  [-122.487258, 45.477466],\n  [-122.520217, 45.535693]\n]]);\n\nvar intersection = turf.intersect(poly1, poly2);\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 20,
									"name": "poly1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the first polygon"
									},
									"type": {
										"type": "reference",
										"name": "Polygon"
									}
								},
								{
									"id": 21,
									"name": "poly2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the second polygon"
									},
									"type": {
										"type": "reference",
										"name": "Polygon"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Feature"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "bool.ts",
							"line": 75,
							"character": 25
						}
					]
				},
				{
					"id": 22,
					"name": "union",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 23,
							"name": "union",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes two or more Polygon and returns a combined polygon. If the input polygons are not contiguous, this function returns a MultiPolygon feature.",
								"returns": "a combined Polygon or MultiPolygon feature",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar poly1 = turf.polygon([[\n    [-82.574787, 35.594087],\n    [-82.574787, 35.615581],\n    [-82.545261, 35.615581],\n    [-82.545261, 35.594087],\n    [-82.574787, 35.594087]\n]], {\"fill\": \"#0f0\"});\nvar poly2 = turf.polygon([[\n    [-82.560024, 35.585153],\n    [-82.560024, 35.602602],\n    [-82.52964, 35.602602],\n    [-82.52964, 35.585153],\n    [-82.560024, 35.585153]\n]], {\"fill\": \"#00f\"});\n\nvar union = turf.union([poly1, poly2]);\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 24,
									"name": "polys",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "An array of polygons to combine"
									},
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Feature",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Polygon"
													}
												]
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Polygon"
											},
											{
												"type": "reference",
												"name": "MultiPolygon"
											}
										]
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "bool.ts",
							"line": 103,
							"character": 21
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						14,
						18,
						22
					]
				}
			],
			"sources": [
				{
					"fileName": "bool.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 25,
			"name": "\"calc\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/calc.ts",
			"comment": {
				"shortText": "Turf measurement functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 26,
					"name": "area",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 27,
							"name": "area",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes one or more features and returns their area in square meters.",
								"returns": "area in square meters",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar polygon = turf.polygon([[[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]]);\n\nvar area = turf.area(polygon);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 28,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input GeoJSON feature(s)"
									},
									"type": {
										"type": "reference",
										"name": "turf.AllGeoJSON"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 21,
							"character": 20
						}
					]
				},
				{
					"id": 29,
					"name": "bearing",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 30,
							"name": "bearing",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes two Point|points and finds the geographic bearing between them,\ni.e. the angle measured in degrees from the north line (0 degrees)",
								"returns": "angle in decimal degrees, between -180 and 180 degrees (positive clockwise)",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar point1 = turf.point([-75.343, 39.984]);\nvar point2 = turf.point([-75.534, 39.123]);\n\nvar bearing = turf.bearing(point1, point2);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 31,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "starting Point"
									},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								},
								{
									"id": 32,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "ending Point"
									},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								},
								{
									"id": 33,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(final: Calculates the final bearing if true)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 34,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 35,
													"name": "final",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "calc.ts",
															"line": 40,
															"character": 75
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														35
													]
												}
											],
											"sources": [
												{
													"fileName": "calc.ts",
													"line": 40,
													"character": 68
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 40,
							"character": 23
						}
					]
				},
				{
					"id": 36,
					"name": "center",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 37,
							"name": "center",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a Feature or FeatureCollection and returns the absolute center point of all features.",
								"returns": "a Point feature at the absolute center point of all input features",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar features = turf.featureCollection([\n  turf.point( [-97.522259, 35.4691]),\n  turf.point( [-97.502754, 35.463455]),\n  turf.point( [-97.508269, 35.463245])\n]);\n\nvar center = turf.center(features);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 38,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON to be centered"
									},
									"type": {
										"type": "reference",
										"name": "turf.AllGeoJSON"
									}
								},
								{
									"id": 39,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(properties: an Object that is used as the Feature's properties)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 40,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 41,
													"name": "properties",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "calc.ts",
															"line": 60,
															"character": 69
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "object"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														41
													]
												}
											],
											"sources": [
												{
													"fileName": "calc.ts",
													"line": 60,
													"character": 57
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 60,
							"character": 22
						}
					]
				},
				{
					"id": 42,
					"name": "centerOfMass",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 43,
							"name": "centerOfMass",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes any Feature or a FeatureCollection and returns its [center of mass](https://en.wikipedia.org/wiki/Center_of_mass) using this formula: [Centroid of Polygon](https://en.wikipedia.org/wiki/Centroid#Centroid_of_polygon).",
								"returns": "the center of mass",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);\n\nvar center = turf.centerOfMass(polygon);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 44,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON to be centered"
									},
									"type": {
										"type": "reference",
										"name": "turf.AllGeoJSON"
									}
								},
								{
									"id": 45,
									"name": "properties",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional object to be used as the Feature's properties"
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 75,
							"character": 28
						}
					]
				},
				{
					"id": 46,
					"name": "centroid",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 47,
							"name": "centroid",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes one or more features and calculates the centroid using the mean of all vertices.\nThis lessens the effect of small islands and artifacts when calculating the centroid of a set of polygons.",
								"returns": "the centroid of the input features",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);\n\nvar centroid = turf.centroid(polygon);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 48,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON to be centered"
									},
									"type": {
										"type": "reference",
										"name": "turf.AllGeoJSON"
									}
								},
								{
									"id": 49,
									"name": "properties",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional object to be used as the Feature's properties"
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 91,
							"character": 24
						}
					]
				},
				{
					"id": 50,
					"name": "destination",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 51,
							"name": "destination",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a Point and calculates the location of a destination point given a distance in degrees, radians, miles, or kilometers; and bearing in degrees. This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.",
								"returns": "destination point",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar point = turf.point([-75.343, 39.984]);\nvar distance = 50;\nvar bearing = 90;\nvar options = {units: 'miles'};\n\nvar destination = turf.destination(point, distance, bearing, options);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 52,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "starting point"
									},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								},
								{
									"id": 53,
									"name": "dist",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "distance from the origin point"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 54,
									"name": "angle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "bearing ranging from -180 to 180"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 55,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(units: \"miles\", \"kilometers\", \"degrees\", or \"radians\",\nproperties: an Object that is used as the Feature's properties)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 56,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 58,
													"name": "properties",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "calc.ts",
															"line": 113,
															"character": 116
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "object"
													}
												},
												{
													"id": 57,
													"name": "units",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "calc.ts",
															"line": 113,
															"character": 92
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.Units"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														58,
														57
													]
												}
											],
											"sources": [
												{
													"fileName": "calc.ts",
													"line": 113,
													"character": 85
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 113,
							"character": 27
						}
					]
				},
				{
					"id": 59,
					"name": "distance",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 60,
							"name": "distance",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Calculates the distance between two points in degrees, radians,\nmiles, or kilometers. This uses the\n[Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula)\nto account for global curvature.",
								"returns": "distance between the two points",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar from = turf.point([-75.343, 39.984]);\nvar to = turf.point([-75.534, 39.123]);\nvar options = {units: 'miles'};\n\nvar distance = turf.distance(from, to, options);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 61,
									"name": "from",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "origin point"
									},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								},
								{
									"id": 62,
									"name": "to",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "destination point"
									},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								},
								{
									"id": 63,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(units: \"miles\", \"kilometers\", \"degrees\", or \"radians\")"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 64,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 65,
													"name": "units",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "calc.ts",
															"line": 135,
															"character": 74
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.Units"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														65
													]
												}
											],
											"sources": [
												{
													"fileName": "calc.ts",
													"line": 135,
													"character": 67
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 135,
							"character": 24
						}
					]
				},
				{
					"id": 66,
					"name": "envelope",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 67,
							"name": "envelope",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes any number of features and returns a rectangular Polygon that encompasses all vertices.",
								"returns": "a rectangular Polygon feature that encompasses all vertices",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar features = turf.featureCollection([\n  turf.point([-75.343, 39.984], {\"name\": \"Location A\"}),\n  turf.point([-75.833, 39.284], {\"name\": \"Location B\"}),\n  turf.point([-75.534, 39.123], {\"name\": \"Location C\"})\n]);\n\nvar enveloped = turf.envelope(features);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 68,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input features"
									},
									"type": {
										"type": "reference",
										"name": "turf.AllGeoJSON"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 153,
							"character": 24
						}
					]
				},
				{
					"id": 69,
					"name": "greatCircle",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 70,
							"name": "greatCircle",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Calculate great circles routes as LineString",
								"returns": "great circle line feature",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar start = turf.point([-122, 48]);\nvar end = turf.point([-77, 39]);\n\nvar greatCircle = turf.greatCircle(start, end, {'name': 'Seattle to DC'});\n"
									}
								]
							},
							"parameters": [
								{
									"id": 71,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "source point feature"
									},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								},
								{
									"id": 72,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "destination point feature"
									},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								},
								{
									"id": 73,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(properties: an Object that is used as the Feature's properties, npoints: number of points,\noffset: offset controls the likelyhood that lines will be split which cross the dateline. The higher the number the more likely.)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 74,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 76,
													"name": "npoints",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "calc.ts",
															"line": 172,
															"character": 101
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 77,
													"name": "offset",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "calc.ts",
															"line": 172,
															"character": 117
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 75,
													"name": "properties",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "calc.ts",
															"line": 172,
															"character": 84
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "object"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														76,
														77,
														75
													]
												}
											],
											"sources": [
												{
													"fileName": "calc.ts",
													"line": 172,
													"character": 72
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "LineString"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 172,
							"character": 27
						}
					]
				},
				{
					"id": 78,
					"name": "len",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 79,
							"name": "len",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a GeoJSON and measures its length in the specified units, (Multi)Point's distance are ignored.",
								"returns": "length of GeoJSON",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line = turf.lineString([[115, -32], [131, -22], [143, -25], [150, -34]]);\nvar length = turf.length(line, {units: 'miles'});\n"
									}
								]
							},
							"parameters": [
								{
									"id": 80,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON to measure"
									},
									"type": {
										"type": "reference",
										"name": "turf.AllGeoJSON"
									}
								},
								{
									"id": 81,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(units: \"miles\", \"kilometers\", \"degrees\", or \"radians\")"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 82,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 83,
													"name": "units",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "calc.ts",
															"line": 187,
															"character": 61
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.Units"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														83
													]
												}
											],
											"sources": [
												{
													"fileName": "calc.ts",
													"line": 187,
													"character": 54
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 187,
							"character": 19
						}
					]
				},
				{
					"id": 84,
					"name": "midpoint",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 85,
							"name": "midpoint",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes two points and returns a point midway between them.\nThe midpoint is calculated geodesically, meaning the curvature of the earth is taken into account.",
								"returns": "a point midway between `pt1` and `pt2`",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar point1 = turf.point([144.834823, -37.771257]);\nvar point2 = turf.point([145.14244, -37.830937]);\n\nvar midpoint = turf.midpoint(point1, point2);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 86,
									"name": "point1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "first point"
									},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								},
								{
									"id": 87,
									"name": "point2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "second point"
									},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 204,
							"character": 24
						}
					]
				},
				{
					"id": 88,
					"name": "nearestPoint",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 89,
							"name": "nearestPoint",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a reference point and a FeatureCollection of Features\nwith Point geometries and returns the\npoint from the FeatureCollection closest to the reference. This calculation\nis geodesic.",
								"returns": "the closest point in the set to the reference point",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar targetPoint = turf.point([28.965797, 41.010086], {\"marker-color\": \"#0F0\"});\nvar points = turf.featureCollection([\n    turf.point([28.973865, 41.011122]),\n    turf.point([28.948459, 41.024204]),\n    turf.point([28.938674, 41.013324])\n]);\n\nvar nearest = turf.nearestPoint(targetPoint, points);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 90,
									"name": "targetPoint",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the reference point"
									},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								},
								{
									"id": 91,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "against input point set"
									},
									"type": {
										"type": "reference",
										"name": "FeatureCollection",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Point"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 227,
							"character": 28
						}
					]
				},
				{
					"id": 92,
					"name": "nearestPointOnLine",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 93,
							"name": "nearestPointOnLine",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a Point and a LineString and calculates the closest Point on the (Multi)LineString.",
								"returns": "closest point on the `line` to `point`. The properties object will contain three values: `index`: closest point was found on nth line part, `dist`: distance between pt and the closest point, `location`: distance along the line between start and the closest point.",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line = turf.lineString([\n    [-77.031669, 38.878605],\n    [-77.029609, 38.881946],\n    [-77.020339, 38.884084],\n    [-77.025661, 38.885821],\n    [-77.021884, 38.889563],\n    [-77.019824, 38.892368]\n]);\nvar pt = turf.point([-77.037076, 38.884017]);\n\nvar snapped = turf.nearestPointOnLine(line, pt, {units: 'miles'});\n"
									}
								]
							},
							"parameters": [
								{
									"id": 94,
									"name": "lines",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "lines to snap to"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "LineString"
											},
											{
												"type": "reference",
												"name": "MultiLineString"
											}
										]
									}
								},
								{
									"id": 95,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "point to snap from"
									},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								},
								{
									"id": 96,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(units: \"miles\", \"kilometers\"\n\"degrees\", or \"radians\")"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 97,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 98,
													"name": "units",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "calc.ts",
															"line": 253,
															"character": 114
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.Units"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														98
													]
												}
											],
											"sources": [
												{
													"fileName": "calc.ts",
													"line": 253,
													"character": 107
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 253,
							"character": 34
						}
					]
				},
				{
					"id": 99,
					"name": "pointToLineDistance",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 100,
							"name": "pointToLineDistance",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the minimum distance between a Point and a LineString, being the distance from a line the\nminimum distance between the point and any segment of the `LineString`.",
								"returns": "distance between point and line",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar pt = turf.point([0, 0]);\nvar line = turf.lineString([[1, 1],[-1, 1]]);\n\nvar distance = turf.pointToLineDistance(pt, line, {units: 'miles'});\n//=69.11854715938406\n"
									}
								]
							},
							"parameters": [
								{
									"id": 101,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Feature or Geometry"
									},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								},
								{
									"id": 102,
									"name": "line",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Feature or Geometry"
									},
									"type": {
										"type": "reference",
										"name": "LineString"
									}
								},
								{
									"id": 103,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(units: \"miles\", \"kilometers\", \"degrees\", or \"radians\"\nmercerator: distance on Mercator if true or WGS84 projection if false)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 104,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 106,
													"name": "mercator",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "calc.ts",
															"line": 274,
															"character": 115
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 105,
													"name": "units",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "calc.ts",
															"line": 274,
															"character": 93
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.Units"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														106,
														105
													]
												}
											],
											"sources": [
												{
													"fileName": "calc.ts",
													"line": 274,
													"character": 86
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 274,
							"character": 35
						}
					]
				},
				{
					"id": 107,
					"name": "polygonTangents",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 108,
							"name": "polygonTangents",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Finds the tangents of a Polygon|(Multi)Polygon from a Point.",
								"returns": "Feature Collection containing the two tangent points",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar polygon = turf.polygon([[[11, 0], [22, 4], [31, 0], [31, 11], [21, 15], [11, 11], [11, 0]]]);\nvar point = turf.point([61, 5]);\n\nvar tangents = turf.polygonTangents(point, polygon)\n"
									}
								]
							},
							"parameters": [
								{
									"id": 109,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "to calculate the tangent points from"
									},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								},
								{
									"id": 110,
									"name": "polygon",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "to get tangents from"
									},
									"type": {
										"type": "reference",
										"name": "Polygon"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 290,
							"character": 31
						}
					]
				},
				{
					"id": 111,
					"name": "rhumbBearing",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 112,
							"name": "rhumbBearing",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes two points and finds the bearing angle between them along a Rhumb line\ni.e. the angle measured in degrees start the north line (0 degrees)",
								"returns": "bearing from north in decimal degrees, between -180 and 180 degrees (positive clockwise)",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar point1 = turf.point([-75.343, 39.984], {\"marker-color\": \"#F00\"});\nvar point2 = turf.point([-75.534, 39.123], {\"marker-color\": \"#00F\"});\n\nvar bearing = turf.rhumbBearing(point1, point2);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 113,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "starting Point"
									},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								},
								{
									"id": 114,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "ending Point"
									},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								},
								{
									"id": 115,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(final: calculates the final bearing if true)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 116,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 117,
													"name": "final",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "calc.ts",
															"line": 309,
															"character": 80
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														117
													]
												}
											],
											"sources": [
												{
													"fileName": "calc.ts",
													"line": 309,
													"character": 73
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 309,
							"character": 28
						}
					]
				},
				{
					"id": 118,
					"name": "rhumbDestination",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 119,
							"name": "rhumbDestination",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the destination Point having travelled the given distance along a Rhumb line from the\norigin Point with the (varant) given bearing.",
								"returns": "Destination point.",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar pt = turf.point([-75.343, 39.984], {\"marker-color\": \"F00\"});\nvar distance = 50;\nvar bearing = 90;\nvar options = {units: 'miles'};\n\nvar destination = turf.rhumbDestination(pt, distance, bearing, options);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 120,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "starting point"
									},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								},
								{
									"id": 121,
									"name": "dist",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "distance from the starting point"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 122,
									"name": "angle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "varant bearing angle ranging from -180 to 180 degrees from north"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 123,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(units: \"miles\", \"kilometers\", \"degrees\", or \"radians\",\nproperties: an Object that is used as the Feature's properties)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 124,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 126,
													"name": "properties",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "calc.ts",
															"line": 332,
															"character": 121
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "object"
													}
												},
												{
													"id": 125,
													"name": "units",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "calc.ts",
															"line": 332,
															"character": 97
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.Units"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														126,
														125
													]
												}
											],
											"sources": [
												{
													"fileName": "calc.ts",
													"line": 332,
													"character": 90
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 332,
							"character": 32
						}
					]
				},
				{
					"id": 127,
					"name": "rhumbDistance",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 128,
							"name": "rhumbDistance",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Calculates the distance along a rhumb line between two Point|points in degrees, radians,\nmiles, or kilometers.",
								"returns": "distance between the two points",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar from = turf.point([-75.343, 39.984]);\nvar to = turf.point([-75.534, 39.123]);\nvar options = {units: 'miles'};\n\nvar distance = turf.rhumbDistance(from, to, options);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 129,
									"name": "from",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "origin point"
									},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								},
								{
									"id": 130,
									"name": "to",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "destination point"
									},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								},
								{
									"id": 131,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(units: \"miles\", \"kilometers\", \"degrees\", or \"radians\")"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 132,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 133,
													"name": "units",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "calc.ts",
															"line": 352,
															"character": 79
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.Units"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														133
													]
												}
											],
											"sources": [
												{
													"fileName": "calc.ts",
													"line": 352,
													"character": 72
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 352,
							"character": 29
						}
					]
				},
				{
					"id": 134,
					"name": "shortestPath",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 135,
							"name": "shortestPath",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the shortest LineString path from start point to end point without colliding with\nany Feature in FeatureCollection<Polygon> obstacles",
								"returns": "shortest path between start and end",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar start = [-5, -6];\nvar end = [9, -6];\nvar options = {\n  obstacles: turf.polygon([[[0, -7], [5, -7], [5, -3], [0, -3], [0, -7]]])\n};\n\nvar path = turf.shortestPath(start, end, options);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 136,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "point"
									},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								},
								{
									"id": 137,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "point"
									},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								},
								{
									"id": 138,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(obstacles: areas which path cannot travel,\nminDistance: minimum distance between shortest path and obstacles,\nunits: \"miles\", \"kilometers\", \"degrees\", or \"radians\",\nresolution: distance between matrix points on which the path will be calculated)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 139,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 141,
													"name": "minDistance",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "calc.ts",
															"line": 377,
															"character": 135
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 140,
													"name": "obstacles",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "calc.ts",
															"line": 377,
															"character": 84
														}
													],
													"type": {
														"type": "reference",
														"name": "FeatureCollection",
														"typeArguments": [
															{
																"type": "reference",
																"name": "Polygon"
															}
														]
													}
												},
												{
													"id": 143,
													"name": "resolution",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "calc.ts",
															"line": 377,
															"character": 174
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 142,
													"name": "units",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "calc.ts",
															"line": 377,
															"character": 150
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.Units"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														141,
														140,
														143,
														142
													]
												}
											],
											"sources": [
												{
													"fileName": "calc.ts",
													"line": 377,
													"character": 73
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "LineString"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 377,
							"character": 28
						}
					]
				},
				{
					"id": 144,
					"name": "voronoi",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 145,
							"name": "voronoi",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a FeatureCollection of points, and a bounding box, and returns a FeatureCollection\nof Voronoi polygons.",
								"text": "The Voronoi algorithim used comes from the d3-voronoi package.\n",
								"returns": "a set of polygons, one per input point.",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar options = {\n  bbox: [-70, 40, -60, 60]\n};\nvar points = turf.randomPoint(100, options);\nvar voronoiPolygons = turf.voronoi(points, options);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 146,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "to find the Voronoi polygons around."
									},
									"type": {
										"type": "reference",
										"name": "FeatureCollection",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Point"
											}
										]
									}
								},
								{
									"id": 147,
									"name": "bbox",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional clipping rectangle, in [minX, minY, maxX, MaxY] order."
									},
									"type": {
										"type": "reference",
										"name": "turf.BBox"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 397,
							"character": 23
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						26,
						29,
						36,
						42,
						46,
						50,
						59,
						66,
						69,
						78,
						84,
						88,
						92,
						99,
						107,
						111,
						118,
						127,
						134,
						144
					]
				}
			],
			"sources": [
				{
					"fileName": "calc.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 148,
			"name": "\"cluster\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/cluster.ts",
			"comment": {
				"shortText": "Turf AGGREGATION functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 149,
					"name": "dbscan",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 150,
							"name": "dbscan",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a set of Point|points and partition them into clusters according to [DBSCAN's data clustering algorithm] (https://en.wikipedia.org/wiki/DBSCAN).",
								"returns": "Clustered Points with an additional two properties associated to each Feature:\n- {number} cluster - the associated clusterId\n- {string} dbscan - type of point it has been classified as ('core'|'edge'|'noise')",
								"tags": [
									{
										"tag": "example",
										"text": "\n// create random points with random z-values in their properties\nvar points = turf.randomPoint(100, {bbox: [0, 30, 20, 50]});\nvar maxDistance = 100;\nvar clustered = turf.clustersDbscan(points, maxDistance);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 151,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "to be clustered"
									},
									"type": {
										"type": "reference",
										"name": "FeatureCollection",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Point"
											}
										]
									}
								},
								{
									"id": 152,
									"name": "maxDistance",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Maximum Distance between any point of the cluster to generate the clusters (kilometers only)"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 153,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(units: \"miles\", \"kilometers\", \"degrees\", or \"radians\",\nminPoints: Minimum number of points to generate a single cluster, points which do not meet this requirement will be classified as an 'edge' or 'noise'.)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 154,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 156,
													"name": "minPoints",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "cluster.ts",
															"line": 29,
															"character": 125
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 155,
													"name": "units",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "cluster.ts",
															"line": 29,
															"character": 103
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.Units"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														156,
														155
													]
												}
											],
											"sources": [
												{
													"fileName": "cluster.ts",
													"line": 29,
													"character": 96
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "cluster.ts",
							"line": 29,
							"character": 22
						}
					]
				},
				{
					"id": 164,
					"name": "get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 165,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get Cluster",
								"returns": "Single Cluster filtered by GeoJSON Properties",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar geojson = turf.featureCollection([\n    turf.point([0, 0], {'marker-symbol': 'circle'}),\n    turf.point([2, 4], {'marker-symbol': 'star'}),\n    turf.point([3, 6], {'marker-symbol': 'star'}),\n    turf.point([5, 1], {'marker-symbol': 'square'}),\n    turf.point([4, 2], {'marker-symbol': 'circle'})\n]);\n\n// Create a cluster using K-Means (adds `cluster` to GeoJSON properties)\nvar clustered = turf.clustersKmeans(geojson);\n\n// Retrieve first cluster (0)\nvar cluster = turf.getCluster(clustered, {cluster: 0});\n//= cluster\n\n// Retrieve cluster based on custom properties\nturf.getCluster(clustered, {'marker-symbol': 'circle'}).length;\n//= 2\nturf.getCluster(clustered, {'marker-symbol': 'square'}).length;\n//= 1\n"
									}
								]
							},
							"parameters": [
								{
									"id": 166,
									"name": "fcoll",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "FeatureCollection",
										"typeArguments": [
											{
												"type": "reference",
												"name": "GeometryObject"
											}
										]
									}
								},
								{
									"id": 167,
									"name": "filter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Filter used on GeoJSON properties to get Cluster"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "GeometryObject"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "cluster.ts",
							"line": 82,
							"character": 19
						}
					]
				},
				{
					"id": 157,
					"name": "kmeans",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 158,
							"name": "kmeans",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a set of Point|points and partition them into clusters using the k-mean .\nIt uses the [k-means algorithm](https://en.wikipedia.org/wiki/K-means_clustering)",
								"returns": "Clustered Points with an additional two properties associated to each Feature:\n- {number} cluster - the associated clusterId\n- {[number, number]} centroid - Centroid of the cluster [Longitude, Latitude]",
								"tags": [
									{
										"tag": "example",
										"text": "\n// create random points with random z-values in their properties\nvar points = turf.randomPoint(100, {bbox: [0, 30, 20, 50]});\nvar options = {numberOfClusters: 7};\nvar clustered = turf.clustersKmeans(points, options);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 159,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "to be clustered"
									},
									"type": {
										"type": "reference",
										"name": "FeatureCollection",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Point"
											}
										]
									}
								},
								{
									"id": 160,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(numberOfClusters: numberOfClusters that will be generated,\nmutate: allows GeoJSON input to be mutated if true (significant performance increase))"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 161,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 163,
													"name": "mutate",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "cluster.ts",
															"line": 50,
															"character": 109
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 162,
													"name": "numberOfClusters",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "cluster.ts",
															"line": 50,
															"character": 93
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														163,
														162
													]
												}
											],
											"sources": [
												{
													"fileName": "cluster.ts",
													"line": 50,
													"character": 75
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "cluster.ts",
							"line": 50,
							"character": 22
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						149,
						164,
						157
					]
				}
			],
			"sources": [
				{
					"fileName": "cluster.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 168,
			"name": "\"compare\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/compare.ts",
			"comment": {
				"shortText": "Turf BOOLEANS functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 169,
					"name": "contains",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 170,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns True if the second geometry is completely contained by the first geometry.\nThe interiors of both geometries must intersect and, the interior and boundary of the secondary (geometry b)\nmust not intersect the exterior of the primary (geometry a).\n(Opposite result of within.)",
								"returns": "true/false",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\nvar point = turf.point([1, 2]);\n\nturf.booleanContains(line, point);\n//=true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 171,
									"name": "feature1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Feature or Geometry"
									},
									"type": {
										"type": "reference",
										"name": "Feature"
									}
								},
								{
									"id": 172,
									"name": "feature2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Feature or Geometry"
									},
									"type": {
										"type": "reference",
										"name": "Feature"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "compare.ts",
							"line": 28,
							"character": 24
						}
					]
				},
				{
					"id": 173,
					"name": "crosses",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 174,
							"name": "crosses",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if the intersection results in a geometry whose dimension is one less than\nthe maximum dimension of the two source geometries and the intersection set is interior to\nboth source geometries.",
								"text": "Returns true for only multipoint/polygon, multipoint/linestring, linestring/linestring, linestring/polygon, and linestring/multipolygon comparisons.\n",
								"returns": "true/false",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line1 = turf.lineString([[-2, 2], [4, 2]]);\nvar line2 = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n\nvar cross = turf.booleanCrosses(line1, line2);\n//=true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 175,
									"name": "feature1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Feature or Geometry"
									},
									"type": {
										"type": "reference",
										"name": "Feature"
									}
								},
								{
									"id": 176,
									"name": "feature2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Feature or Geometry"
									},
									"type": {
										"type": "reference",
										"name": "Feature"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "compare.ts",
							"line": 49,
							"character": 23
						}
					]
				},
				{
					"id": 177,
					"name": "disjoint",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 178,
							"name": "disjoint",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if the intersection of the two geometries is an empty set.",
								"returns": "true/false",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar point = turf.point([2, 2]);\nvar line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n\nturf.booleanDisjoint(line, point);\n//=true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 179,
									"name": "feature1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Feature or Geometry"
									},
									"type": {
										"type": "reference",
										"name": "Feature"
									}
								},
								{
									"id": 180,
									"name": "feature2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Feature or Geometry"
									},
									"type": {
										"type": "reference",
										"name": "Feature"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "compare.ts",
							"line": 66,
							"character": 24
						}
					]
				},
				{
					"id": 181,
					"name": "equal",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 182,
							"name": "equal",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Determine whether two geometries of the same type have identical X,Y coordinate values.\nSee http://edndoc.esri.com/arcsde/9.0/general_topics/understand_spatial_relations.htm",
								"returns": "true if the objects are equal, false otherwise",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar pt1 = turf.point([0, 0]);\nvar pt2 = turf.point([0, 0]);\nvar pt3 = turf.point([1, 1]);\n\nturf.booleanEqual(pt1, pt2);\n//= true\nturf.booleanEqual(pt2, pt3);\n//= false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 183,
									"name": "feature1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON input"
									},
									"type": {
										"type": "reference",
										"name": "Feature"
									}
								},
								{
									"id": 184,
									"name": "feature2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON input"
									},
									"type": {
										"type": "reference",
										"name": "Feature"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "compare.ts",
							"line": 87,
							"character": 21
						}
					]
				},
				{
					"id": 192,
					"name": "parallel",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 193,
							"name": "parallel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns True if each segment of `line1` is parallel to the correspondent segment of `line2`",
								"returns": "true/false if the lines are parallel",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line1 = turf.lineString([[0, 0], [0, 1]]);\nvar line2 = turf.lineString([[1, 0], [1, 1]]);\n\nturf.booleanParallel(line1, line2);\n//=true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 194,
									"name": "line1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Feature or Geometry"
									},
									"type": {
										"type": "reference",
										"name": "LineString"
									}
								},
								{
									"id": 195,
									"name": "line2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Feature or Geometry"
									},
									"type": {
										"type": "reference",
										"name": "LineString"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "compare.ts",
							"line": 130,
							"character": 24
						}
					]
				},
				{
					"id": 185,
					"name": "pointInPolygon",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 186,
							"name": "pointInPolygon",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a Point and a Polygon or MultiPolygon and determines if the point resides inside the polygon. The polygon can\nbe convex or concave. The function accounts for holes.",
								"returns": "`true` if the Point is inside the Polygon; `false` if the Point is not inside the Polygon",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar pt = turf.point([-77, 44]);\nvar poly = turf.polygon([[\n  [-81, 41],\n  [-81, 47],\n  [-72, 47],\n  [-72, 41],\n  [-81, 41]\n]]);\n\nturf.booleanPointInPolygon(pt, poly);\n//= true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 187,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input point"
									},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								},
								{
									"id": 188,
									"name": "polygon",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input polygon or multipolygon"
									},
									"type": {
										"type": "reference",
										"name": "Polygon"
									}
								},
								{
									"id": 189,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(ignoreBoundary: True if polygon boundary should be ignored when determining if the point is inside the polygon otherwise false.)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 190,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 191,
													"name": "ignoreBoundary",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "compare.ts",
															"line": 113,
															"character": 97
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														191
													]
												}
											],
											"sources": [
												{
													"fileName": "compare.ts",
													"line": 113,
													"character": 81
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "compare.ts",
							"line": 113,
							"character": 30
						}
					]
				},
				{
					"id": 196,
					"name": "pointOnLine",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 197,
							"name": "pointOnLine",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if a point is on a line. Accepts a optional parameter to ignore the start and end vertices of the linestring.",
								"returns": "true/false",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar pt = turf.point([0, 0]);\nvar line = turf.lineString([[-1, -1],[1, 1],[1.5, 2.2]]);\nvar isPointOnLine = turf.booleanPointOnLine(pt, line);\n//=true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 198,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Point"
									},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								},
								{
									"id": 199,
									"name": "line",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON LineString"
									},
									"type": {
										"type": "reference",
										"name": "LineString"
									}
								},
								{
									"id": 200,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(ignoreEndVertices: ignore the start and end vertices if true.)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 201,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 202,
													"name": "ignoreEndVertices",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "compare.ts",
															"line": 148,
															"character": 97
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														202
													]
												}
											],
											"sources": [
												{
													"fileName": "compare.ts",
													"line": 148,
													"character": 78
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "compare.ts",
							"line": 148,
							"character": 27
						}
					]
				},
				{
					"id": 203,
					"name": "within",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 204,
							"name": "within",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if the first geometry is completely within the second geometry.\nThe interiors of both geometries must intersect and, the interior and boundary of the primary (geometry a)\nmust not intersect the exterior of the secondary (geometry b).\n(Opposite result of the contains.)",
								"returns": "true/false",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\nvar point = turf.point([1, 2]);\n\nturf.booleanWithin(point, line);\n//=true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 205,
									"name": "feature1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Feature or Geometry"
									},
									"type": {
										"type": "reference",
										"name": "Feature"
									}
								},
								{
									"id": 206,
									"name": "feature2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Feature or Geometry"
									},
									"type": {
										"type": "reference",
										"name": "Feature"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "compare.ts",
							"line": 168,
							"character": 22
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						169,
						173,
						177,
						181,
						192,
						185,
						196,
						203
					]
				}
			],
			"sources": [
				{
					"fileName": "compare.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 207,
			"name": "\"convert\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/convert.ts",
			"comment": {
				"shortText": "Turf FEATURE CONVERSION functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 208,
					"name": "combine",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 209,
							"name": "combine",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Combines a FeatureCollection of Point, LineString, or Polygon features\ninto MultiPoint, MultiLineString, or MultiPolygon features.",
								"returns": "a Feature of corresponding type to input",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar fc = turf.featureCollection([\n  turf.point([19.026432, 47.49134]),\n  turf.point([19.074497, 47.509548])\n]);\n\nvar combined = turf.combine(fc);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 210,
									"name": "fcoll",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "a FeatureCollection of any type"
									},
									"type": {
										"type": "reference",
										"name": "FeatureCollection",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Point"
													},
													{
														"type": "reference",
														"name": "LineString"
													},
													{
														"type": "reference",
														"name": "Polygon"
													}
												]
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature"
							}
						}
					],
					"sources": [
						{
							"fileName": "convert.ts",
							"line": 26,
							"character": 23
						}
					]
				},
				{
					"id": 211,
					"name": "explode",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 212,
							"name": "explode",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a feature or set of features and returns all positions as Point|points.\nThrows an error if it encounters an unknown geometry type",
								"returns": "points representing the exploded input features",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);\n\nvar explode = turf.explode(polygon);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 213,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input features"
									},
									"type": {
										"type": "reference",
										"name": "turf.AllGeoJSON"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "convert.ts",
							"line": 41,
							"character": 23
						}
					]
				},
				{
					"id": 214,
					"name": "flatten",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 215,
							"name": "flatten",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Flattens any GeoJSON to a FeatureCollection inspired by [geojson-flatten](https://github.com/tmcw/geojson-flatten).",
								"returns": "all Multi-Geometries are flattened into single Features",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar multiGeometry = turf.multiPolygon([\n  [[[102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0], [102.0, 2.0]]],\n  [[[100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0]],\n  [[100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2]]]\n]);\n\nvar flatten = turf.flatten(multiGeometry);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 216,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "any valid GeoJSON Object"
									},
									"type": {
										"type": "reference",
										"name": "turf.AllGeoJSON"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection"
							}
						}
					],
					"sources": [
						{
							"fileName": "convert.ts",
							"line": 60,
							"character": 23
						}
					]
				},
				{
					"id": 217,
					"name": "lineToPolygon",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 218,
							"name": "lineToPolygon",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts (Multi)LineString(s) to Polygon(s).",
								"returns": "converted to Polygons",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line = turf.lineString([[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]);\n\nvar polygon = turf.lineToPolygon(line);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 219,
									"name": "lines",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Features to convert"
									},
									"type": {
										"type": "reference",
										"name": "FeatureCollection",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "LineString"
													},
													{
														"type": "reference",
														"name": "MultiLineString"
													}
												]
											}
										]
									}
								},
								{
									"id": 220,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 221,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 223,
													"name": "autoComplete",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "convert.ts",
															"line": 78,
															"character": 141
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 224,
													"name": "orderCoords",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "convert.ts",
															"line": 78,
															"character": 163
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 222,
													"name": "properties",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "convert.ts",
															"line": 78,
															"character": 119
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "object"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														223,
														224,
														222
													]
												}
											],
											"sources": [
												{
													"fileName": "convert.ts",
													"line": 78,
													"character": 107
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Polygon"
											},
											{
												"type": "reference",
												"name": "MultiPolygon"
											}
										]
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "convert.ts",
							"line": 78,
							"character": 29
						}
					]
				},
				{
					"id": 228,
					"name": "polygonToLine",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 229,
							"name": "polygonToLine",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts a Polygon to LineString|(Multi)LineString or MultiPolygon to a FeatureCollection of LineString|(Multi)LineString.",
								"returns": "converted (Multi)Polygon to (Multi)LineString",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar poly = turf.polygon([[[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]]);\n\nvar line = turf.polygonToLine(poly);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 230,
									"name": "polygon",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Feature to convert"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Polygon"
											},
											{
												"type": "reference",
												"name": "MultiPolygon"
											}
										]
									}
								},
								{
									"id": 231,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(properties: an Object that is used as the Feature's propertiese)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 232,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 233,
													"name": "properties",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "convert.ts",
															"line": 116,
															"character": 91
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "object"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														233
													]
												}
											],
											"sources": [
												{
													"fileName": "convert.ts",
													"line": 116,
													"character": 79
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "FeatureCollection"
									},
									{
										"type": "reference",
										"name": "Feature",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "LineString"
													},
													{
														"type": "reference",
														"name": "MultiLineString"
													}
												]
											}
										]
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "convert.ts",
							"line": 116,
							"character": 29
						}
					]
				},
				{
					"id": 225,
					"name": "polygonize",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 226,
							"name": "polygonize",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Polygonizes LineString or MultiLineString(s) into Polygons.",
								"text": "Implementation of GEOSPolygonize function (`geos::operation::polygonize::Polygonizer`).\n\nPolygonizes a set of lines that represents edges in a planar graph. Edges must be correctly\nnoded, i.e., they must only meet at their endpoints.\n\nThe implementation correctly handles:\n\n- Dangles: edges which have one or both ends which are not incident on another edge endpoint.\n- Cut Edges (bridges): edges that are connected at both ends but which do not form part of a polygon.\n\nThrows an error is geoJson is invalid.\n",
								"returns": "Polygons created\n"
							},
							"parameters": [
								{
									"id": 227,
									"name": "lines",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Lines in order to polygonize"
									},
									"type": {
										"type": "reference",
										"name": "FeatureCollection",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "LineString"
													},
													{
														"type": "reference",
														"name": "MultiLineString"
													}
												]
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "convert.ts",
							"line": 100,
							"character": 26
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						208,
						211,
						214,
						217,
						228,
						225
					]
				}
			],
			"sources": [
				{
					"fileName": "convert.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 234,
			"name": "\"coords\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/coords.ts",
			"comment": {
				"shortText": "Turf COORDINATE MUTATION functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 235,
					"name": "cleanCoords",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 236,
							"name": "cleanCoords",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes redundant coordinates from any GeoJSON Geometry.",
								"returns": "the cleaned input Feature/Geometry",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line = turf.lineString([[0, 0], [0, 2], [0, 5], [0, 8], [0, 8], [0, 10]]);\nvar multiPoint = turf.multiPoint([[0, 0], [0, 0], [2, 2]]);\n\nturf.cleanCoords(line).geometry.coordinates;\n//= [[0, 0], [0, 10]]\n\nturf.cleanCoords(multiPoint).geometry.coordinates;\n//= [[0, 0], [2, 2]]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 237,
									"name": "feature",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Feature or Geometry"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Feature"
											},
											{
												"type": "reference",
												"name": "GeometryObject"
											}
										]
									}
								},
								{
									"id": 238,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(mutate: allows GeoJSON input to be mutated if true)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 239,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 240,
													"name": "mutate",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "coords.ts",
															"line": 29,
															"character": 87
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														240
													]
												}
											],
											"sources": [
												{
													"fileName": "coords.ts",
													"line": 29,
													"character": 79
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Feature"
									},
									{
										"type": "reference",
										"name": "GeometryObject"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "coords.ts",
							"line": 29,
							"character": 27
						}
					]
				},
				{
					"id": 241,
					"name": "flip",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 242,
							"name": "flip",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes input features and flips all of their coordinates from `[x, y]` to `[y, x]`.",
								"returns": "a feature or set of features of the same type as `input` with flipped coordinates",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar serbia = turf.point([20.566406, 43.421008]);\n\nvar saudiArabia = turf.flip(serbia);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 243,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input features"
									},
									"type": {
										"type": "reference",
										"name": "turf.AllGeoJSON"
									}
								},
								{
									"id": 244,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(mutate: allows GeoJSON input to be mutated if true (significant performance increase))"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 245,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 246,
													"name": "mutate",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "coords.ts",
															"line": 45,
															"character": 63
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														246
													]
												}
											],
											"sources": [
												{
													"fileName": "coords.ts",
													"line": 45,
													"character": 55
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "turf.AllGeoJSON"
							}
						}
					],
					"sources": [
						{
							"fileName": "coords.ts",
							"line": 45,
							"character": 20
						}
					]
				},
				{
					"id": 247,
					"name": "getAll",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 248,
							"name": "getAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get all coordinates from any GeoJSON object.",
								"returns": "coordinate position array",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar features = turf.featureCollection([\n  turf.point([26, 37], {foo: 'bar'}),\n  turf.point([36, 53], {hello: 'world'})\n]);\n\nvar coords = turf.coordAll(features);\n//= [[26, 37], [36, 53]]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 249,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "any GeoJSON object"
									},
									"type": {
										"type": "reference",
										"name": "turf.AllGeoJSON"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "array",
									"elementType": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "coords.ts",
							"line": 63,
							"character": 22
						}
					]
				},
				{
					"id": 253,
					"name": "getFromFeature",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 254,
							"name": "getFromFeature",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Unwrap coordinates from a Feature, Geometry Object or an Array of numbers",
								"returns": "coordinates",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);\n\nvar coord = turf.getCoords(poly);\n//= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 255,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Object"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											},
											{
												"type": "reference",
												"name": "GeometryObject"
											},
											{
												"type": "reference",
												"name": "Feature"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Array",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "coords.ts",
							"line": 93,
							"character": 30
						}
					]
				},
				{
					"id": 250,
					"name": "getFromPoint",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 251,
							"name": "getFromPoint",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.",
								"returns": "coordinates",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar pt = turf.point([10, 10]);\n\nvar coord = turf.getCoord(pt);\n//= [10, 10]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 252,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Object"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											},
											{
												"type": "reference",
												"name": "Point"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "coords.ts",
							"line": 78,
							"character": 28
						}
					]
				},
				{
					"id": 256,
					"name": "rewind",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 257,
							"name": "rewind",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Rewind (Multi)LineString or (Multi)Polygon outer ring counterclockwise and inner rings clockwise (http://en.wikipedia.org/wiki/Shoelace_formula|Shoelace Formula).",
								"returns": "rewind Polygon",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar polygon = turf.polygon([[[121, -29], [138, -29], [138, -18], [121, -18], [121, -29]]]);\n\nvar rewind = turf.rewind(polygon);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 258,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input GeoJSON Polygon"
									},
									"type": {
										"type": "reference",
										"name": "turf.AllGeoJSON"
									}
								},
								{
									"id": 259,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(reverse: enable reverse winding,\nmutate: allows GeoJSON input to be mutated if true (significant performance increase))"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 260,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 262,
													"name": "mutate",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "coords.ts",
															"line": 110,
															"character": 83
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 261,
													"name": "reverse",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "coords.ts",
															"line": 110,
															"character": 66
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														262,
														261
													]
												}
											],
											"sources": [
												{
													"fileName": "coords.ts",
													"line": 110,
													"character": 57
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "turf.AllGeoJSON"
							}
						}
					],
					"sources": [
						{
							"fileName": "coords.ts",
							"line": 110,
							"character": 22
						}
					]
				},
				{
					"id": 263,
					"name": "round",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 264,
							"name": "round",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Round number to precision",
								"returns": "rounded number",
								"tags": [
									{
										"tag": "example",
										"text": "\nturf.round(120.4321)\n//=120\n\nturf.round(120.4321, 2)\n//=120.43\n"
									}
								]
							},
							"parameters": [
								{
									"id": 265,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Number"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 266,
									"name": "precision",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "coords.ts",
							"line": 127,
							"character": 21
						}
					]
				},
				{
					"id": 267,
					"name": "truncate",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 268,
							"name": "truncate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a GeoJSON Feature or FeatureCollection and truncates the precision of the geometry.",
								"returns": "layer with truncated geometry",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar point = turf.point([\n    70.46923055566859,\n    58.11088890802906,\n    1508\n]);\nvar options = {precision: 3, coordinates: 2};\nvar truncated = turf.truncate(point, options);\n//=truncated.geometry.coordinates => [70.469, 58.111]\n\n//addToMap\nvar addToMap = [truncated];\n"
									}
								]
							},
							"parameters": [
								{
									"id": 269,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "any GeoJSON Feature, FeatureCollection, Geometry or GeometryCollection."
									},
									"type": {
										"type": "reference",
										"name": "turf.AllGeoJSON"
									}
								},
								{
									"id": 270,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(precision: coordinate decimal precision,\ncoordinates: maximum number of coordinates (primarly used to remove z coordinates),\nmutate: allows GeoJSON input to be mutated if true (significant performance increase))"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 271,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 273,
													"name": "maxCoords",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "coords.ts",
															"line": 153,
															"character": 89
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 274,
													"name": "mutate",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "coords.ts",
															"line": 153,
															"character": 105
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 272,
													"name": "precision",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "coords.ts",
															"line": 153,
															"character": 70
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														273,
														274,
														272
													]
												}
											],
											"sources": [
												{
													"fileName": "coords.ts",
													"line": 153,
													"character": 59
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "turf.AllGeoJSON"
							}
						}
					],
					"sources": [
						{
							"fileName": "coords.ts",
							"line": 153,
							"character": 24
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						235,
						241,
						247,
						253,
						250,
						256,
						263,
						267
					]
				}
			],
			"sources": [
				{
					"fileName": "coords.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 275,
			"name": "\"create\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/create.ts",
			"comment": {
				"shortText": "Turf HELPER functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 276,
					"name": "arc",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 277,
							"name": "arc",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a circular arc, of a circle of the given radius and center point, between bearing1 and bearing2;\n0 bearing is North of center point, positive clockwise.",
								"returns": "line arc",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar center = turf.point([-75, 40]);\nvar radius = 5;\nvar bearing1 = 25;\nvar bearing2 = 47;\n\nvar arc = turf.lineArc(center, radius, bearing1, bearing2);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 278,
									"name": "center",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "center point"
									},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								},
								{
									"id": 279,
									"name": "radius",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "radius of the circle"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 280,
									"name": "bearing1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "angle, in decimal degrees, of the first radius of the arc"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 281,
									"name": "bearing2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "angle, in decimal degrees, of the second radius of the arc"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 282,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(steps: number of steps,\nunits: \"miles\", \"kilometers\", \"degrees\", or \"radians\")"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 283,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 284,
													"name": "steps",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "create.ts",
															"line": 31,
															"character": 107
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 285,
													"name": "units",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "create.ts",
															"line": 31,
															"character": 121
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.Units"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														284,
														285
													]
												}
											],
											"sources": [
												{
													"fileName": "create.ts",
													"line": 31,
													"character": 100
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "LineString"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 31,
							"character": 19
						}
					]
				},
				{
					"id": 286,
					"name": "bbox",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 287,
							"name": "bbox",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a set of features, calculates the bbox of all input features, and returns a bounding box.",
								"returns": "bbox extent in [minX, minY, maxX, maxY] order",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);\nvar bbox = turf.bbox(line);\nvar bboxPolygon = turf.bboxPolygon(bbox);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 288,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "any GeoJSON object"
									},
									"type": {
										"type": "reference",
										"name": "turf.AllGeoJSON"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "turf.BBox"
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 45,
							"character": 20
						}
					]
				},
				{
					"id": 289,
					"name": "circle",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 290,
							"name": "circle",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a Point and calculates the circle polygon given a radius in degrees, radians, miles, or kilometers; and steps for precision.",
								"returns": "circle polygon",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar center = [-75.343, 39.984];\nvar radius = 5;\nvar options = {steps: 10, units: 'kilometers', properties: {foo: 'bar'}};\nvar circle = turf.circle(center, radius, options);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 291,
									"name": "center",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "center point"
									},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								},
								{
									"id": 292,
									"name": "radius",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "radius of the circle"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 293,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(steps: number of steps,\nunits: \"miles\", \"kilometers\", \"degrees\", or \"radians\",\nproperties: an object to use as feature's properties)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 294,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 297,
													"name": "properties",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "create.ts",
															"line": 65,
															"character": 111
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "object"
													}
												},
												{
													"id": 295,
													"name": "steps",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "create.ts",
															"line": 65,
															"character": 74
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 296,
													"name": "units",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "create.ts",
															"line": 65,
															"character": 88
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.Units"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														297,
														295,
														296
													]
												}
											],
											"sources": [
												{
													"fileName": "create.ts",
													"line": 65,
													"character": 67
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 65,
							"character": 22
						}
					]
				},
				{
					"id": 298,
					"name": "fColl",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 299,
							"name": "fColl",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes one or more Feature|Features and creates a FeatureCollection.",
								"returns": "FeatureCollection of Features",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\nvar locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\nvar locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n\nvar collection = turf.featureCollection([\n  locationA,\n  locationB,\n  locationC\n]);\n\n//=collection\n"
									}
								]
							},
							"parameters": [
								{
									"id": 300,
									"name": "features",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input features"
									},
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Feature"
											}
										]
									}
								},
								{
									"id": 301,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional Parameters\n(bbox: Bounding Box Array [west, south, east, north] associated with the Feature,\nid: Identifier associated with the Feature)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 302,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 303,
													"name": "bbox",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "create.ts",
															"line": 90,
															"character": 67
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.BBox"
													}
												},
												{
													"id": 304,
													"name": "id",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "create.ts",
															"line": 90,
															"character": 81
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														303,
														304
													]
												}
											],
											"sources": [
												{
													"fileName": "create.ts",
													"line": 90,
													"character": 61
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection"
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 90,
							"character": 21
						}
					]
				},
				{
					"id": 305,
					"name": "feature",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 306,
							"name": "feature",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Wraps a GeoJSON Geometry in a GeoJSON Feature.",
								"returns": "a GeoJSON Feature",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar geometry = {\n  \"type\": \"Point\",\n  \"coordinates\": [110, 50]\n};\n\nvar feature = turf.feature(geometry);\n\n//=feature\n"
									}
								]
							},
							"parameters": [
								{
									"id": 307,
									"name": "geometry",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input geometry"
									},
									"type": {
										"type": "reference",
										"name": "Geometry"
									}
								},
								{
									"id": 308,
									"name": "properties",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional object of key-value pairs to add as properties"
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 309,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional Parameters\n(bbox: Bounding Box Array [west, south, east, north] associated with the Feature,\nid: Identifier associated with the Feature)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 310,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 311,
													"name": "bbox",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "create.ts",
															"line": 113,
															"character": 83
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.BBox"
													}
												},
												{
													"id": 312,
													"name": "id",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "create.ts",
															"line": 113,
															"character": 97
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														311,
														312
													]
												}
											],
											"sources": [
												{
													"fileName": "create.ts",
													"line": 113,
													"character": 77
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature"
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 113,
							"character": 23
						}
					]
				},
				{
					"id": 313,
					"name": "gColl",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 314,
							"name": "gColl",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a Feature<GeometryCollection> based on a\ncoordinate array. Properties can be added optionally.",
								"returns": "a GeoJSON GeometryCollection Feature",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar pt = {\n    \"type\": \"Point\",\n      \"coordinates\": [100, 0]\n    };\nvar line = {\n    \"type\": \"LineString\",\n    \"coordinates\": [ [101, 0], [102, 1] ]\n  };\nvar collection = turf.geometryCollection([pt, line]);\n\n//=collection\n"
									}
								]
							},
							"parameters": [
								{
									"id": 315,
									"name": "geometries",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "an array of GeoJSON Geometries"
									},
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "reference",
												"name": "turf.Geometries"
											}
										]
									}
								},
								{
									"id": 316,
									"name": "properties",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional object of key-value pairs to add as properties"
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 317,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional Parameters\n(bbox: Bounding Box Array [west, south, east, north] associated with the Feature,\nid: Identifier associated with the Feature)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 318,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 319,
													"name": "bbox",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "create.ts",
															"line": 140,
															"character": 92
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.BBox"
													}
												},
												{
													"id": 320,
													"name": "id",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "create.ts",
															"line": 140,
															"character": 106
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														319,
														320
													]
												}
											],
											"sources": [
												{
													"fileName": "create.ts",
													"line": 140,
													"character": 86
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "GeometryCollection"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 140,
							"character": 21
						}
					]
				},
				{
					"id": 321,
					"name": "lineString",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 322,
							"name": "lineString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a LineString Feature from an Array of Positions.",
								"returns": "LineString Feature",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\nvar linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n\n//=linestring1\n//=linestring2\n"
									}
								]
							},
							"parameters": [
								{
									"id": 323,
									"name": "coordinates",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "an array of Positions"
									},
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										]
									}
								},
								{
									"id": 324,
									"name": "properties",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional object of key-value pairs to add as properties"
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 325,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional Parameters\n(bbox: Bounding Box Array [west, south, east, north] associated with the Feature,\nid: Identifier associated with the Feature)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 326,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 327,
													"name": "bbox",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "create.ts",
															"line": 160,
															"character": 96
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.BBox"
													}
												},
												{
													"id": 328,
													"name": "id",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "create.ts",
															"line": 160,
															"character": 110
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														327,
														328
													]
												}
											],
											"sources": [
												{
													"fileName": "create.ts",
													"line": 160,
													"character": 90
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "LineString"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 160,
							"character": 26
						}
					]
				},
				{
					"id": 329,
					"name": "mLinestring",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 330,
							"name": "mLinestring",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a Feature<MultiLineString> based on a\ncoordinate array. Properties can be added optionally.\nThrows an error if no coordinates are passed.",
								"returns": "a MultiLineString feature",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n\n//=multiLine\n"
									}
								]
							},
							"parameters": [
								{
									"id": 331,
									"name": "coordinates",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "an array of LineStrings"
									},
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Array",
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												]
											}
										]
									}
								},
								{
									"id": 332,
									"name": "properties",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional object of key-value pairs to add as properties"
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 333,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional Parameters\n(bbox: Bounding Box Array [west, south, east, north] associated with the Feature,\nid: Identifier associated with the Feature)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 334,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 335,
													"name": "bbox",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "create.ts",
															"line": 180,
															"character": 104
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.BBox"
													}
												},
												{
													"id": 336,
													"name": "id",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "create.ts",
															"line": 180,
															"character": 118
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														335,
														336
													]
												}
											],
											"sources": [
												{
													"fileName": "create.ts",
													"line": 180,
													"character": 98
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "MultiLineString"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 180,
							"character": 27
						}
					]
				},
				{
					"id": 337,
					"name": "mPoint",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 338,
							"name": "mPoint",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a Feature<MultiPoint> based on a\ncoordinate array. Properties can be added optionally.\nThrows an error if no coordinates are passed.",
								"returns": "a MultiPoint feature",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar multiPt = turf.multiPoint([[0,0],[10,10]]);\n\n//=multiPt\n"
									}
								]
							},
							"parameters": [
								{
									"id": 339,
									"name": "coordinates",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "an array of Positions"
									},
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										]
									}
								},
								{
									"id": 340,
									"name": "properties",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional object of key-value pairs to add as properties"
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 341,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional Parameters\n(bbox: Bounding Box Array [west, south, east, north] associated with the Feature,\nid: Identifier associated with the Feature)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 342,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 343,
													"name": "bbox",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "create.ts",
															"line": 200,
															"character": 92
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.BBox"
													}
												},
												{
													"id": 344,
													"name": "id",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "create.ts",
															"line": 200,
															"character": 106
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														343,
														344
													]
												}
											],
											"sources": [
												{
													"fileName": "create.ts",
													"line": 200,
													"character": 86
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "MultiPoint"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 200,
							"character": 22
						}
					]
				},
				{
					"id": 345,
					"name": "mPolygon",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 346,
							"name": "mPolygon",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a Feature<MultiPolygon> based on a\ncoordinate array. Properties can be added optionally.\nThrows an error if no coordinates are passed.",
								"returns": "a multipolygon feature",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n\n//=multiPoly\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 347,
									"name": "coordinates",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "an array of Polygons"
									},
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Array",
														"typeArguments": [
															{
																"type": "reference",
																"name": "Array",
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "number"
																	}
																]
															}
														]
													}
												]
											}
										]
									}
								},
								{
									"id": 348,
									"name": "properties",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional object of key-value pairs to add as properties"
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 349,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional Parameters\n(bbox: Bounding Box Array [west, south, east, north] associated with the Feature,\nid: Identifier associated with the Feature)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 350,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 351,
													"name": "bbox",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "create.ts",
															"line": 221,
															"character": 108
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.BBox"
													}
												},
												{
													"id": 352,
													"name": "id",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "create.ts",
															"line": 221,
															"character": 122
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														351,
														352
													]
												}
											],
											"sources": [
												{
													"fileName": "create.ts",
													"line": 221,
													"character": 102
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "MultiPolygon"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 221,
							"character": 24
						}
					]
				},
				{
					"id": 353,
					"name": "point",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 354,
							"name": "point",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a Point Feature from a Position.",
								"returns": "a Point feature",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar point = turf.point([-75.343, 39.984]);\n\n//=point\n"
									}
								]
							},
							"parameters": [
								{
									"id": 355,
									"name": "coordinates",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "longitude, latitude position (each in decimal degrees)"
									},
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 356,
									"name": "properties",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional object of key-value pairs to add as properties"
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 357,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional Parameters\n(bbox: Bounding Box Array [west, south, east, north] associated with the Feature,\nid: Identifier associated with the Feature)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 358,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 359,
													"name": "bbox",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "create.ts",
															"line": 239,
															"character": 84
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.BBox"
													}
												},
												{
													"id": 360,
													"name": "id",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "create.ts",
															"line": 239,
															"character": 98
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														359,
														360
													]
												}
											],
											"sources": [
												{
													"fileName": "create.ts",
													"line": 239,
													"character": 78
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 239,
							"character": 21
						}
					]
				},
				{
					"id": 361,
					"name": "polygon",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 362,
							"name": "polygon",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a Polygon Feature from an Array of LinearRings.",
								"returns": "Polygon Feature",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n\n//=polygon\n"
									}
								]
							},
							"parameters": [
								{
									"id": 363,
									"name": "coordinates",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "an array of LinearRings"
									},
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Array",
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												]
											}
										]
									}
								},
								{
									"id": 364,
									"name": "properties",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional object of key-value pairs to add as properties"
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 365,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional Parameters\n(bbox: Bounding Box Array [west, south, east, north] associated with the Feature,\nid: Identifier associated with the Feature)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 366,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 367,
													"name": "bbox",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "create.ts",
															"line": 257,
															"character": 100
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.BBox"
													}
												},
												{
													"id": 368,
													"name": "id",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "create.ts",
															"line": 257,
															"character": 114
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														367,
														368
													]
												}
											],
											"sources": [
												{
													"fileName": "create.ts",
													"line": 257,
													"character": 94
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 257,
							"character": 23
						}
					]
				},
				{
					"id": 369,
					"name": "sector",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 370,
							"name": "sector",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a circular sector of a circle of given radius and center Point,\nbetween (clockwise) bearing1 and bearing2; 0 bearing is North of center point, positive clockwise.",
								"returns": "sector polygon",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar center = turf.point([-75, 40]);\nvar radius = 5;\nvar bearing1 = 25;\nvar bearing2 = 45;\n\nvar sector = turf.sector(center, radius, bearing1, bearing2);\n\n//addToMap\nvar addToMap = [center, sector];\n"
									}
								]
							},
							"parameters": [
								{
									"id": 371,
									"name": "center",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "center point"
									},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								},
								{
									"id": 372,
									"name": "radius",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "radius of the circle"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 373,
									"name": "bearing1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "angle, in decimal degrees, of the first radius of the sector"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 374,
									"name": "bearing2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "angle, in decimal degrees, of the second radius of the sector"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 375,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(units: \"miles\", \"kilometers\", \"degrees\", or \"radians\",\nsteps: number of steps)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 376,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 378,
													"name": "steps",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "create.ts",
															"line": 284,
															"character": 129
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 377,
													"name": "units",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "create.ts",
															"line": 284,
															"character": 110
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.Units"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														378,
														377
													]
												}
											],
											"sources": [
												{
													"fileName": "create.ts",
													"line": 284,
													"character": 103
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 284,
							"character": 22
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						276,
						286,
						289,
						298,
						305,
						313,
						321,
						329,
						337,
						345,
						353,
						361,
						369
					]
				}
			],
			"sources": [
				{
					"fileName": "create.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 379,
			"name": "\"feature\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/feature.ts",
			"comment": {
				"shortText": "Turf feature functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 380,
					"name": "buffer",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 381,
							"name": "buffer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Calculates a buffer for input features for a given radius. Units supported are miles, kilometers, and degrees.",
								"text": "When using a negative radius, the resulting geometry may be invalid if\nit's too small compared to the radius magnitude. If the input is a\nFeatureCollection, only valid members will be returned in the output\nFeatureCollection - i.e., the output collection may have fewer members than\nthe input, or even be empty.\n",
								"returns": "buffered features",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar point = turf.point([-90.548630, 14.616599]);\nvar buffered = turf.buffer(point, 500, {units: 'miles'});\n"
									}
								]
							},
							"parameters": [
								{
									"id": 382,
									"name": "features",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input to be buffered"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "GeometryObject"
											},
											{
												"type": "reference",
												"name": "Feature"
											}
										]
									}
								},
								{
									"id": 383,
									"name": "radius",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "distance to draw the buffer (negative values are allowed)"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 384,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(units: \"miles\", \"nauticalmiles\", \"degrees\", \"radians\", \"inches\", \"yards\", \"meters\", \"kilometers\",\nsteps: number of steps)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 385,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 387,
													"name": "steps",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "feature.ts",
															"line": 31,
															"character": 114
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 386,
													"name": "units",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "feature.ts",
															"line": 31,
															"character": 96
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.Units"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														387,
														386
													]
												}
											],
											"sources": [
												{
													"fileName": "feature.ts",
													"line": 31,
													"character": 89
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature"
							}
						}
					],
					"sources": [
						{
							"fileName": "feature.ts",
							"line": 31,
							"character": 22
						}
					]
				},
				{
					"id": 388,
					"name": "clone",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 389,
							"name": "clone",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a cloned copy of the passed GeoJSON Object, including possible 'Foreign Members'.\n~3-5x faster than the common JSON.parse + JSON.stringify combo method.",
								"returns": "cloned GeoJSON Object",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]], {color: 'red'});\n\nvar lineCloned = turf.clone(line);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 390,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Object"
									},
									"type": {
										"type": "reference",
										"name": "turf.AllGeoJSON"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "turf.AllGeoJSON"
							}
						}
					],
					"sources": [
						{
							"fileName": "feature.ts",
							"line": 46,
							"character": 21
						}
					]
				},
				{
					"id": 391,
					"name": "concave",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 392,
							"name": "concave",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a set of points and returns a concave hull Polygon or MultiPolygon.\nInternally, this uses [turf-tin] (https://github.com/Turfjs/turf-tin) to generate geometries.",
								"returns": "a concave hull (null value is returned if unable to compute hull)",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar points = turf.featureCollection([\n  turf.point([-63.601226, 44.642643]),\n  turf.point([-63.591442, 44.651436]),\n  turf.point([-63.580799, 44.648749]),\n  turf.point([-63.573589, 44.641788]),\n  turf.point([-63.587665, 44.64533]),\n  turf.point([-63.595218, 44.64765])\n]);\nvar options = {units: 'miles', maxEdge: 1};\n\nvar hull = turf.concave(points, options);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 393,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input points"
									},
									"type": {
										"type": "reference",
										"name": "FeatureCollection",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Point"
											}
										]
									}
								},
								{
									"id": 394,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(maxEdge: the length (in 'units') of an edge necessary for part of the hull to become concave.,\nunits: can be \"degrees\", \"radians\", \"miles\", or \"kilometers\")"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 395,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 396,
													"name": "maxEdge",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "feature.ts",
															"line": 72,
															"character": 84
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 397,
													"name": "units",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "feature.ts",
															"line": 72,
															"character": 99
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.Units"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														396,
														397
													]
												}
											],
											"sources": [
												{
													"fileName": "feature.ts",
													"line": 72,
													"character": 75
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Feature",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Polygon"
													},
													{
														"type": "reference",
														"name": "MultiPolygon"
													}
												]
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "feature.ts",
							"line": 72,
							"character": 23
						}
					]
				},
				{
					"id": 398,
					"name": "convex",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 399,
							"name": "convex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a Feature or a FeatureCollection and returns a convex hull Polygon.",
								"text": "Internally this uses\nthe [convex-hull] (https://github.com/mikolalysenko/convex-hull) module that\nimplements a [monotone chain hull] (http://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain).\n",
								"returns": "a convex hull",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar points = turf.featureCollection([\n  turf.point([10.195312, 43.755225]),\n  turf.point([10.404052, 43.8424511]),\n  turf.point([10.579833, 43.659924]),\n  turf.point([10.360107, 43.516688]),\n  turf.point([10.14038, 43.588348]),\n  turf.point([10.195312, 43.755225])\n]);\n\nvar hull = turf.convex(points);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 400,
									"name": "features",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input Feature or FeatureCollection"
									},
									"type": {
										"type": "reference",
										"name": "turf.AllGeoJSON"
									}
								},
								{
									"id": 401,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(concavity: 1 - thin shape. Infinity - convex hull.)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 402,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 403,
													"name": "concavity",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "feature.ts",
															"line": 99,
															"character": 68
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														403
													]
												}
											],
											"sources": [
												{
													"fileName": "feature.ts",
													"line": 99,
													"character": 57
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "feature.ts",
							"line": 99,
							"character": 22
						}
					]
				},
				{
					"id": 404,
					"name": "dissolve",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 405,
							"name": "dissolve",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Dissolves a FeatureCollection of polygon features, filtered by an optional property name:value.\nNote that mulitpolygon features within the collection are not supported",
								"returns": "a FeatureCollection containing the dissolved polygons",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar features = turf.featureCollection([\n  turf.polygon([[[0, 0], [0, 1], [1, 1], [1, 0], [0, 0]]], {combine: 'yes'}),\n  turf.polygon([[[0, -1], [0, 0], [1, 0], [1, -1], [0,-1]]], {combine: 'yes'}),\n  turf.polygon([[[1,-1],[1, 0], [2, 0], [2, -1], [1, -1]]], {combine: 'no'}),\n]);\n\nvar dissolved = turf.dissolve(features, {propertyName: 'combine'});\n"
									}
								]
							},
							"parameters": [
								{
									"id": 406,
									"name": "features",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "FeatureCollection",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Polygon"
											}
										]
									}
								},
								{
									"id": 407,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(propertyName: features with equals 'propertyName' in `properties` will be merged)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 408,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 409,
													"name": "propertyName",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "feature.ts",
															"line": 120,
															"character": 94
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														409
													]
												}
											],
											"sources": [
												{
													"fileName": "feature.ts",
													"line": 120,
													"character": 80
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "feature.ts",
							"line": 120,
							"character": 24
						}
					]
				},
				{
					"id": 410,
					"name": "getGeom",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 411,
							"name": "getGeom",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get Geometry from Feature or Geometry Object\nThrows an error if geojson is not a Feature or Geometry Object.",
								"returns": "GeoJSON Geometry Object",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar point = {\n  \"type\": \"Feature\",\n  \"properties\": {},\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [110, 40]\n  }\n}\nvar geom = turf.getGeom(point)\n//={\"type\": \"Point\", \"coordinates\": [110, 40]}\n"
									}
								]
							},
							"parameters": [
								{
									"id": 412,
									"name": "feature",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Feature or Geometry Object"
									},
									"type": {
										"type": "reference",
										"name": "Feature"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "GeometryObject"
									},
									{
										"type": "reference",
										"name": "GeometryCollection"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "feature.ts",
							"line": 142,
							"character": 23
						}
					]
				},
				{
					"id": 413,
					"name": "getType",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 414,
							"name": "getType",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get GeoJSON object's type, Geometry type is prioritize.",
								"returns": "GeoJSON type",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar point = {\n  \"type\": \"Feature\",\n  \"properties\": {},\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [110, 40]\n  }\n}\nvar geom = turf.getType(point)\n//=\"Point\"\n"
									}
								]
							},
							"parameters": [
								{
									"id": 415,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON object"
									},
									"type": {
										"type": "reference",
										"name": "turf.AllGeoJSON"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "feature.ts",
							"line": 163,
							"character": 23
						}
					]
				},
				{
					"id": 416,
					"name": "pointOn",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 417,
							"name": "pointOn",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a Feature or FeatureCollection and returns a Point guaranteed to be on the surface of the feature.",
								"text": "* Given a Polygon, the point will be in the area of the polygon\n* Given a LineString, the point will be along the string\n* Given a Point, the point will the same as the input\n",
								"returns": "a point on the surface of `input`",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar polygon = turf.polygon([[\n  [116, -36],\n  [131, -32],\n  [146, -43],\n  [155, -25],\n  [133, -9],\n  [111, -22],\n  [116, -36]\n]]);\n\nvar pointOnPolygon = turf.pointOnFeature(polygon);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 418,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "any Feature or FeatureCollection"
									},
									"type": {
										"type": "reference",
										"name": "turf.AllGeoJSON"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "feature.ts",
							"line": 189,
							"character": 23
						}
					]
				},
				{
					"id": 419,
					"name": "simplify",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 420,
							"name": "simplify",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a GeoJSON object and returns a simplified version. Internally uses\n[simplify-js] (http://mourner.github.io/simplify-js/) to perform simplification using the Ramer-Douglas-Peucker algorithm.",
								"returns": "a simplified GeoJSON",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar geojson = turf.polygon([[\n  [-70.603637, -33.399918],\n  [-70.614624, -33.395332],\n  [-70.639343, -33.392466],\n  [-70.659942, -33.394759],\n  [-70.683975, -33.404504],\n  [-70.697021, -33.419406],\n  [-70.701141, -33.434306],\n  [-70.700454, -33.446339],\n  [-70.694274, -33.458369],\n  [-70.682601, -33.465816],\n  [-70.668869, -33.472117],\n  [-70.646209, -33.473835],\n  [-70.624923, -33.472117],\n  [-70.609817, -33.468107],\n  [-70.595397, -33.458369],\n  [-70.587158, -33.442901],\n  [-70.587158, -33.426283],\n  [-70.590591, -33.414248],\n  [-70.594711, -33.406224],\n  [-70.603637, -33.399918]\n]]);\nvar options = {tolerance: 0.01, highQuality: false};\nvar simplified = turf.simplify(geojson, options);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 421,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "object to be simplified"
									},
									"type": {
										"type": "reference",
										"name": "turf.AllGeoJSON"
									}
								},
								{
									"id": 422,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(tolerance: simplification tolerance,\nhighQuality: whether or not to spend more time to create a higher-quality simplification with a different algorithm,\nmutate: allows GeoJSON input to be mutated (significant performance increase if true))"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 423,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 425,
													"name": "highQuality",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "feature.ts",
															"line": 229,
															"character": 89
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 426,
													"name": "mutate",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "feature.ts",
															"line": 229,
															"character": 105
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 424,
													"name": "tolerance",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "feature.ts",
															"line": 229,
															"character": 69
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														425,
														426,
														424
													]
												}
											],
											"sources": [
												{
													"fileName": "feature.ts",
													"line": 229,
													"character": 58
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "turf.AllGeoJSON"
							}
						}
					],
					"sources": [
						{
							"fileName": "feature.ts",
							"line": 229,
							"character": 24
						}
					]
				},
				{
					"id": 427,
					"name": "tesselate",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 428,
							"name": "tesselate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Tesselates a Polygon into a FeatureCollection of triangular polygons\nusing [earcut] (https://github.com/mapbox/earcut).",
								"returns": "a geometrycollection feature",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar poly = turf.polygon([[[11, 0], [22, 4], [31, 0], [31, 11], [21, 15], [11, 11], [11, 0]]]);\nvar triangles = turf.tesselate(poly);\n\n//addToMap\nvar addToMap = [poly, triangles]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 429,
									"name": "poly",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the polygon to tesselate"
									},
									"type": {
										"type": "reference",
										"name": "Feature",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Polygon"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "feature.ts",
							"line": 246,
							"character": 25
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						380,
						388,
						391,
						398,
						404,
						410,
						413,
						416,
						419,
						427
					]
				}
			],
			"sources": [
				{
					"fileName": "feature.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 430,
			"name": "\"grids\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/grids.ts",
			"comment": {
				"shortText": "Turf GRIDS functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 431,
					"name": "hexGrid",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 432,
							"name": "hexGrid",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a bounding box and the diameter of the cell and returns a FeatureCollection of flat-topped\nhexagons or triangles (Polygon features) aligned in an \"odd-q\" vertical grid as\ndescribed in [Hexagonal Grids](http://www.redblobgames.com/grids/hexagons/).",
								"returns": "a hexagonal grid",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar bbox = [-96,31,-84,40];\nvar cellSide = 50;\nvar options = {units: 'miles'};\n\nvar hexgrid = turf.hexGrid(bbox, cellSide, options);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 433,
									"name": "bbox",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "extent in [minX, minY, maxX, maxY] order"
									},
									"type": {
										"type": "reference",
										"name": "turf.BBox"
									}
								},
								{
									"id": 434,
									"name": "cellSide",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "length of the side of the the hexagons or triangles, in units. It will also coincide with the\nradius of the circumcircle of the hexagons."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 435,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(units: used in calculating cell size, can be \"degrees\", \"radians\", \"miles\", or \"kilometers\",\nproperties: passed to each hexagon or triangle of the grid,\nmaskpoly: if passed a Polygon or MultiPolygon, the grid Points will be created only inside it,\ntriangle: whether to return as triangles instead of hexagons)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 436,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 439,
													"name": "maskpoly",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "grids.ts",
															"line": 33,
															"character": 114
														}
													],
													"type": {
														"type": "reference",
														"name": "Feature",
														"typeArguments": [
															{
																"type": "union",
																"types": [
																	{
																		"type": "reference",
																		"name": "Polygon"
																	},
																	{
																		"type": "reference",
																		"name": "MultiPolygon"
																	}
																]
															}
														]
													}
												},
												{
													"id": 438,
													"name": "properties",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "grids.ts",
															"line": 33,
															"character": 96
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "object"
													}
												},
												{
													"id": 440,
													"name": "triangles",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "grids.ts",
															"line": 33,
															"character": 171
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 437,
													"name": "units",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "grids.ts",
															"line": 33,
															"character": 72
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.Units"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														439,
														438,
														440,
														437
													]
												}
											],
											"sources": [
												{
													"fileName": "grids.ts",
													"line": 33,
													"character": 65
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "grids.ts",
							"line": 33,
							"character": 23
						}
					]
				},
				{
					"id": 441,
					"name": "pointGrid",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 442,
							"name": "pointGrid",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a Point grid from a bounding box (with optional polygon mask).",
								"returns": "grid of points",
								"tags": [
									{
										"tag": "name",
										"text": "pointGrid"
									},
									{
										"tag": "example",
										"text": "\nvar extent = [-70.823364, -33.553984, -70.473175, -33.302986];\nvar cellSide = 3;\nvar options = {units: 'miles'};\n\nvar grid = turf.pointGrid(extent, cellSide, options);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 443,
									"name": "bbox",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "extent in [minX, minY, maxX, maxY] order"
									},
									"type": {
										"type": "reference",
										"name": "turf.BBox"
									}
								},
								{
									"id": 444,
									"name": "cellSide",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the distance between points, in units"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 445,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(units: used in calculating cellSide, can be degrees, radians, miles, or kilometers,\nmaskpoly: if passed a Polygon or MultiPolygon, the grid Points will be created only inside it,\nproperties: passed to each point of the grid)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 446,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 448,
													"name": "maskpoly",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "grids.ts",
															"line": 55,
															"character": 96
														}
													],
													"type": {
														"type": "reference",
														"name": "Feature",
														"typeArguments": [
															{
																"type": "union",
																"types": [
																	{
																		"type": "reference",
																		"name": "Polygon"
																	},
																	{
																		"type": "reference",
																		"name": "MultiPolygon"
																	}
																]
															}
														]
													}
												},
												{
													"id": 449,
													"name": "properties",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "grids.ts",
															"line": 55,
															"character": 154
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "object"
													}
												},
												{
													"id": 447,
													"name": "units",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "grids.ts",
															"line": 55,
															"character": 74
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.Units"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														448,
														449,
														447
													]
												}
											],
											"sources": [
												{
													"fileName": "grids.ts",
													"line": 55,
													"character": 67
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "grids.ts",
							"line": 55,
							"character": 25
						}
					]
				},
				{
					"id": 450,
					"name": "squareGrid",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 451,
							"name": "squareGrid",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a square grid from a bounding box (with optional polygon mask).",
								"returns": "grid a grid of polygons",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar bbox = [-95, 30 ,-85, 40];\nvar cellSide = 50;\nvar options = {units: 'miles'};\n\nvar squareGrid = turf.squareGrid(bbox, cellSide, options);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 452,
									"name": "bbox",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "extent in [minX, minY, maxX, maxY] order"
									},
									"type": {
										"type": "reference",
										"name": "turf.BBox"
									}
								},
								{
									"id": 453,
									"name": "cellSide",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "of each cell, in units"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 454,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(units: used in calculating cellSide, can be degrees, radians, miles, or kilometers,\nmaskpoly: if passed a Polygon or MultiPolygon, the grid Points will be created only inside it,\nproperties: passed to each point of the grid)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 455,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 457,
													"name": "maskpoly",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "grids.ts",
															"line": 76,
															"character": 97
														}
													],
													"type": {
														"type": "reference",
														"name": "Feature",
														"typeArguments": [
															{
																"type": "union",
																"types": [
																	{
																		"type": "reference",
																		"name": "Polygon"
																	},
																	{
																		"type": "reference",
																		"name": "MultiPolygon"
																	}
																]
															}
														]
													}
												},
												{
													"id": 458,
													"name": "properties",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "grids.ts",
															"line": 76,
															"character": 155
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "object"
													}
												},
												{
													"id": 456,
													"name": "units",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "grids.ts",
															"line": 76,
															"character": 75
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.Units"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														457,
														458,
														456
													]
												}
											],
											"sources": [
												{
													"fileName": "grids.ts",
													"line": 76,
													"character": 68
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "grids.ts",
							"line": 76,
							"character": 26
						}
					]
				},
				{
					"id": 459,
					"name": "triangleGrid",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 460,
							"name": "triangleGrid",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a bounding box and a cell depth and returns a set of triangular polygons in a grid.",
								"returns": "grid of polygons",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar bbox = [-95, 30 ,-85, 40];\nvar cellSide = 50;\nvar options = {units: 'miles'};\n\nvar triangleGrid = turf.triangleGrid(bbox, cellSide, options);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 461,
									"name": "bbox",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "extent in [minX, minY, maxX, maxY] order"
									},
									"type": {
										"type": "reference",
										"name": "turf.BBox"
									}
								},
								{
									"id": 462,
									"name": "cellSide",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "dimension of each cell"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 463,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(units: used in calculating cellSide, can be degrees, radians, miles, or kilometers,\nmaskpoly: if passed a Polygon or MultiPolygon, the grid Points will be created only inside it,\nproperties: passed to each point of the grid)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 464,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 466,
													"name": "maskpoly",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "grids.ts",
															"line": 97,
															"character": 99
														}
													],
													"type": {
														"type": "reference",
														"name": "Feature",
														"typeArguments": [
															{
																"type": "union",
																"types": [
																	{
																		"type": "reference",
																		"name": "Polygon"
																	},
																	{
																		"type": "reference",
																		"name": "MultiPolygon"
																	}
																]
															}
														]
													}
												},
												{
													"id": 467,
													"name": "properties",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "grids.ts",
															"line": 97,
															"character": 157
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "object"
													}
												},
												{
													"id": 465,
													"name": "units",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "grids.ts",
															"line": 97,
															"character": 77
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.Units"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														466,
														467,
														465
													]
												}
											],
											"sources": [
												{
													"fileName": "grids.ts",
													"line": 97,
													"character": 70
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "grids.ts",
							"line": 97,
							"character": 28
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						431,
						441,
						450,
						459
					]
				}
			],
			"sources": [
				{
					"fileName": "grids.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 468,
			"name": "\"ipolate\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/ipolate.ts",
			"comment": {
				"shortText": "Turf INTERPOLATION functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 469,
					"name": "interpolate",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 470,
							"name": "interpolate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a set of points and estimates their 'property' values on a grid using the [Inverse Distance Weighting (IDW) method](https://en.wikipedia.org/wiki/Inverse_distance_weighting).",
								"returns": "grid of points or polygons with interpolated 'property'",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar points = turf.randomPoint(30, {bbox: [50, 30, 70, 50]});\n\n// add a random property to each point\nturf.featureEach(points, function(point) {\n    point.properties.solRad = Math.random() * 50;\n});\nvar options = {gridType: 'points', property: 'solRad', units: 'miles'};\nvar grid = turf.interpolate(points, 100, options);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 471,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "with known value"
									},
									"type": {
										"type": "reference",
										"name": "FeatureCollection",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Point"
											}
										]
									}
								},
								{
									"id": 472,
									"name": "cellSize",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the distance across each grid point"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 473,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(gridType: defines the output format based on a Grid Type (options: 'square' | 'point' | 'hex' | 'triangle'),\nzProperty: the property name in `points` from which z-values will be pulled, zValue fallbacks to 3rd coordinate if no property exists,\nunits: used in calculating cellSize, can be degrees, radians, miles, or kilometers,\nweight: exponent regulating the distance-decay weighting)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 474,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 475,
													"name": "gridType",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "ipolate.ts",
															"line": 33,
															"character": 106
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.Grid"
													}
												},
												{
													"id": 477,
													"name": "units",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "ipolate.ts",
															"line": 33,
															"character": 143
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.Units"
													}
												},
												{
													"id": 478,
													"name": "weight",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "ipolate.ts",
															"line": 33,
															"character": 163
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 476,
													"name": "zProperty",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "ipolate.ts",
															"line": 33,
															"character": 128
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														475,
														477,
														478,
														476
													]
												}
											],
											"sources": [
												{
													"fileName": "ipolate.ts",
													"line": 33,
													"character": 96
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Point"
											},
											{
												"type": "reference",
												"name": "Polygon"
											}
										]
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ipolate.ts",
							"line": 33,
							"character": 27
						}
					]
				},
				{
					"id": 479,
					"name": "isobands",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 480,
							"name": "isobands",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a grid FeatureCollection of Point features with z-values and an array of\nvalue breaks and generates filled contour isobands.",
								"returns": "a FeatureCollection of MultiPolygon features representing isobands.\n"
							},
							"parameters": [
								{
									"id": 481,
									"name": "pointGrid",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input points"
									},
									"type": {
										"type": "reference",
										"name": "FeatureCollection",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Point"
											}
										]
									}
								},
								{
									"id": 482,
									"name": "breaks",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "where to draw contours"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 483,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "options on output\n(zProperty: the property name in `points` from which z-values will be pulled,\ncommonProperties: GeoJSON properties passed to ALL isobands,\nbreaksProperties: GeoJSON properties passed, in order, to the correspondent isoband (order defined by breaks))"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 484,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 487,
													"name": "breaksProperties",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "ipolate.ts",
															"line": 49,
															"character": 159
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												},
												{
													"id": 486,
													"name": "commonProperties",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "ipolate.ts",
															"line": 49,
															"character": 133
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "object"
													}
												},
												{
													"id": 485,
													"name": "zProperty",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "ipolate.ts",
															"line": 49,
															"character": 107
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														487,
														486,
														485
													]
												}
											],
											"sources": [
												{
													"fileName": "ipolate.ts",
													"line": 49,
													"character": 96
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "MultiPolygon"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ipolate.ts",
							"line": 49,
							"character": 24
						}
					]
				},
				{
					"id": 488,
					"name": "isolines",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 489,
							"name": "isolines",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a grid FeatureCollection of Point features with z-values and an array of\nvalue breaks and generates [isolines](http://en.wikipedia.org/wiki/Isoline).",
								"returns": "a FeatureCollection of MultiLineString features representing isolines.",
								"tags": [
									{
										"tag": "example",
										"text": "\n// create a grid of points with random z-values in their properties\nvar extent = [0, 30, 20, 50];\nvar cellWidth = 100;\nvar pointGrid = turf.pointGrid(extent, cellWidth, {units: 'miles'});\n\nfor (var i = 0; i < pointGrid.features.length; i++) {\n    pointGrid.features[i].properties.temperature = Math.random() * 10;\n}\nvar breaks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nvar lines = turf.isolines(pointGrid, breaks, {zProperty: 'temperature'});\n"
									}
								]
							},
							"parameters": [
								{
									"id": 490,
									"name": "pointGrid",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input points"
									},
									"type": {
										"type": "reference",
										"name": "FeatureCollection",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Point"
											}
										]
									}
								},
								{
									"id": 491,
									"name": "breaks",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "values of `zProperty` where to draw isolines"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 492,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "options on output\n(zProperty: the property name in `points` from which z-values will be pulled,\ncommonProperties: GeoJSON properties passed to ALL isobands,\nbreaksProperties: GeoJSON properties passed, in order, to the correspondent isoband (order defined by breaks))"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 493,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 496,
													"name": "breaksProperties",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "ipolate.ts",
															"line": 77,
															"character": 159
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												},
												{
													"id": 495,
													"name": "commonProperties",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "ipolate.ts",
															"line": 77,
															"character": 133
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "object"
													}
												},
												{
													"id": 494,
													"name": "zProperty",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "ipolate.ts",
															"line": 77,
															"character": 107
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														496,
														495,
														494
													]
												}
											],
											"sources": [
												{
													"fileName": "ipolate.ts",
													"line": 77,
													"character": 96
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "MultiLineString"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ipolate.ts",
							"line": 77,
							"character": 24
						}
					]
				},
				{
					"id": 497,
					"name": "planepoint",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 498,
							"name": "planepoint",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a triangular plane as a Polygon\nand a Point within that triangle and returns the z-value\nat that point. The Polygon should have properties `a`, `b`, and `c`\nthat define the values at its three corners. Alternatively, the z-values\nof each triangle point can be provided by their respective 3rd coordinate\nif their values are not provided as properties.",
								"returns": "the z-value for `interpolatedPoint`",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar point = turf.point([-75.3221, 39.529]);\n// \"a\", \"b\", and \"c\" values represent the values of the coordinates in order.\nvar triangle = turf.polygon([[\n  [-75.1221, 39.57],\n  [-75.58, 39.18],\n  [-75.97, 39.86],\n  [-75.1221, 39.57]\n]], {\n  \"a\": 11,\n  \"b\": 122,\n  \"c\": 44\n});\n\nvar zValue = turf.planepoint(point, triangle);\npoint.properties.zValue = zValue;\n"
									}
								]
							},
							"parameters": [
								{
									"id": 499,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the Point for which a z-value will be calculated"
									},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								},
								{
									"id": 500,
									"name": "triangle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "a Polygon feature with three vertices"
									},
									"type": {
										"type": "reference",
										"name": "Feature",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Polygon"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "ipolate.ts",
							"line": 109,
							"character": 26
						}
					]
				},
				{
					"id": 501,
					"name": "tin",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 502,
							"name": "tin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a set of points and creates a\n[Triangulated Irregular Network](http://en.wikipedia.org/wiki/Triangulated_irregular_network),\nor a TIN for short, returned as a collection of Polygons. These are often used\nfor developing elevation contour maps or stepped heat visualizations.",
								"text": "If an optional z-value property is provided then it is added as properties called `a`, `b`,\nand `c` representing its value at each of the points that represent the corners of the\ntriangle.\n",
								"returns": "TIN output",
								"tags": [
									{
										"tag": "example",
										"text": "\n// generate some random point data\nvar points = turf.randomPoint(30, {bbox: [50, 30, 70, 50]});\n\n// add a random property to each point between 0 and 9\nfor (var i = 0; i < points.features.length; i++) {\n  points.features[i].properties.z = ~~(Math.random() * 9);\n}\nvar tin = turf.tin(points, 'z');\n\n//addToMap\nvar addToMap = [tin, points]\nfor (var i = 0; i < tin.features.length; i++) {\n  var properties  = tin.features[i].properties;\n  properties.fill = '#' + properties.a + properties.b + properties.c;\n}\n"
									}
								]
							},
							"parameters": [
								{
									"id": 503,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input points"
									},
									"type": {
										"type": "reference",
										"name": "FeatureCollection",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Point"
											}
										]
									}
								},
								{
									"id": 504,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ipolate.ts",
							"line": 144,
							"character": 19
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						469,
						479,
						488,
						497,
						501
					]
				}
			],
			"sources": [
				{
					"fileName": "ipolate.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 505,
			"name": "\"joins\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/joins.ts",
			"comment": {
				"shortText": "Turf JOINS functions.\nhttp://turfjs.org/docs/"
			},
			"sources": [
				{
					"fileName": "joins.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 506,
			"name": "\"line\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/line.ts",
			"comment": {
				"shortText": "Turf line functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 507,
					"name": "along",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 508,
							"name": "along",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a LineString and returns a Point at a specified distance along the line.",
								"returns": "Point `distance` `units` along the line",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line = turf.lineString([[-83, 30], [-84, 36], [-78, 41]]);\nvar options = {units: 'miles'};\n\nvar along = turf.along(line, 200, options);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 509,
									"name": "line",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input line"
									},
									"type": {
										"type": "reference",
										"name": "LineString"
									}
								},
								{
									"id": 510,
									"name": "distance",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "distance along the line"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 511,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(units: can be degrees, radians, miles, or kilometers)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 512,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 513,
													"name": "units",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "line.ts",
															"line": 26,
															"character": 76
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.Units"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														513
													]
												}
											],
											"sources": [
												{
													"fileName": "line.ts",
													"line": 26,
													"character": 69
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "line.ts",
							"line": 26,
							"character": 21
						}
					]
				},
				{
					"id": 514,
					"name": "bezierSpline",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 515,
							"name": "bezierSpline",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a LineString and returns a curved version\nby applying a [Bezier spline](http://en.wikipedia.org/wiki/B%C3%A9zier_spline)\nalgorithm.",
								"text": "The bezier spline implementation is by [Leszek Rybicki](http://leszek.rybicki.cc/).\n",
								"returns": "curved line",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line = turf.lineString([\n  [-76.091308, 18.427501],\n  [-76.695556, 18.729501],\n  [-76.552734, 19.40443],\n  [-74.61914, 19.134789],\n  [-73.652343, 20.07657],\n  [-73.157958, 20.210656]\n]);\n\nvar curved = turf.bezierSpline(line);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 516,
									"name": "line",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input LineString"
									},
									"type": {
										"type": "reference",
										"name": "LineString"
									}
								},
								{
									"id": 517,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(resolution: time in milliseconds between points,\nsharpness: a measure of how curvy the path should be between splines)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 518,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 519,
													"name": "resolution",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "line.ts",
															"line": 54,
															"character": 71
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 520,
													"name": "sharpness",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "line.ts",
															"line": 54,
															"character": 90
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														519,
														520
													]
												}
											],
											"sources": [
												{
													"fileName": "line.ts",
													"line": 54,
													"character": 59
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "LineString"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "line.ts",
							"line": 54,
							"character": 28
						}
					]
				},
				{
					"id": 521,
					"name": "chunk",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 522,
							"name": "chunk",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Divides a LineString into chunks of a specified length.\nIf the line is shorter than the segment length then the original line is returned.",
								"returns": "collection of line segments",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line = turf.lineString([[-95, 40], [-93, 45], [-85, 50]]);\n\nvar chunk = turf.lineChunk(line, 15, {units: 'miles'});\n"
									}
								]
							},
							"parameters": [
								{
									"id": 523,
									"name": "lines",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the lines to split"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FeatureCollection",
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "LineString"
															},
															{
																"type": "reference",
																"name": "MultiLineString"
															}
														]
													}
												]
											},
											{
												"type": "reference",
												"name": "Feature",
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "LineString"
															},
															{
																"type": "reference",
																"name": "MultiLineString"
															}
														]
													}
												]
											}
										]
									}
								},
								{
									"id": 524,
									"name": "segmentLength",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "how long to make each segment"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 525,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(units: units can be degrees, radians, miles, or kilometers,\nreverse: reverses coordinates to start the first chunked segment at the end)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 526,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 528,
													"name": "reverse",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "line.ts",
															"line": 73,
															"character": 199
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 527,
													"name": "units",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "line.ts",
															"line": 73,
															"character": 178
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.Units"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														528,
														527
													]
												}
											],
											"sources": [
												{
													"fileName": "line.ts",
													"line": 73,
													"character": 171
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "LineString"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "line.ts",
							"line": 73,
							"character": 21
						}
					]
				},
				{
					"id": 529,
					"name": "intersect",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 530,
							"name": "intersect",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes any LineString GeoJSON and returns the intersecting point(s).",
								"returns": "point(s) that intersect both",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line1 = turf.lineString([[126, -11], [129, -21]]);\nvar line2 = turf.lineString([[123, -18], [131, -14]]);\nvar intersects = turf.lineIntersect(line1, line2);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 531,
									"name": "line1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "any LineString"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FeatureCollection",
												"typeArguments": [
													{
														"type": "reference",
														"name": "LineString"
													}
												]
											},
											{
												"type": "reference",
												"name": "Feature",
												"typeArguments": [
													{
														"type": "reference",
														"name": "LineString"
													}
												]
											}
										]
									}
								},
								{
									"id": 532,
									"name": "line2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "any LineString"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FeatureCollection",
												"typeArguments": [
													{
														"type": "reference",
														"name": "LineString"
													}
												]
											},
											{
												"type": "reference",
												"name": "Feature",
												"typeArguments": [
													{
														"type": "reference",
														"name": "LineString"
													}
												]
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "line.ts",
							"line": 88,
							"character": 25
						}
					]
				},
				{
					"id": 533,
					"name": "offset",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 534,
							"name": "offset",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a LineString and returns a LineString offset by the specified distance.",
								"returns": "Line offset from the input line",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line = turf.lineString([[-83, 30], [-84, 36], [-78, 41]], { \"stroke\": \"#F00\" });\n\nvar offsetLine = turf.lineOffset(line, 2, {units: 'miles'});\n"
									}
								]
							},
							"parameters": [
								{
									"id": 535,
									"name": "line",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input GeoJSON"
									},
									"type": {
										"type": "reference",
										"name": "Feature",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "LineString"
													},
													{
														"type": "reference",
														"name": "MultiLineString"
													}
												]
											}
										]
									}
								},
								{
									"id": 536,
									"name": "distance",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "distance to offset the line (can be of negative value)"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 537,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(units:] can be degrees, radians, miles, kilometers, inches, yards, meters)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 538,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 539,
													"name": "units",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "line.ts",
															"line": 105,
															"character": 112
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.Units"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														539
													]
												}
											],
											"sources": [
												{
													"fileName": "line.ts",
													"line": 105,
													"character": 105
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "LineString"
											},
											{
												"type": "reference",
												"name": "MultiLineString"
											}
										]
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "line.ts",
							"line": 105,
							"character": 22
						}
					]
				},
				{
					"id": 540,
					"name": "overlap",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 541,
							"name": "overlap",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes any LineString or Polygon and returns the overlapping lines between both features.",
								"returns": "lines(s) that are overlapping between both features",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line1 = turf.lineString([[115, -35], [125, -30], [135, -30], [145, -35]]);\nvar line2 = turf.lineString([[115, -25], [125, -30], [135, -30], [145, -25]]);\n\nvar overlapping = turf.lineOverlap(line1, line2);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 542,
									"name": "line1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "any LineString or Polygon"
									},
									"type": {
										"type": "reference",
										"name": "Feature",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "LineString"
													},
													{
														"type": "reference",
														"name": "MultiLineString"
													},
													{
														"type": "reference",
														"name": "Polygon"
													},
													{
														"type": "reference",
														"name": "MultiPolygon"
													}
												]
											}
										]
									}
								},
								{
									"id": 543,
									"name": "line2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "any LineString or Polygon"
									},
									"type": {
										"type": "reference",
										"name": "Feature",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "LineString"
													},
													{
														"type": "reference",
														"name": "MultiLineString"
													},
													{
														"type": "reference",
														"name": "Polygon"
													},
													{
														"type": "reference",
														"name": "MultiPolygon"
													}
												]
											}
										]
									}
								},
								{
									"id": 544,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(tolerance: Tolerance distance to match overlapping line segments (in kilometers))"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 545,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 546,
													"name": "tolerance",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "line.ts",
															"line": 123,
															"character": 221
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														546
													]
												}
											],
											"sources": [
												{
													"fileName": "line.ts",
													"line": 123,
													"character": 210
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "LineString"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "line.ts",
							"line": 123,
							"character": 23
						}
					]
				},
				{
					"id": 547,
					"name": "segment",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 548,
							"name": "segment",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a FeatureCollection of 2-vertex LineString segments from a LineString or Polygon.",
								"returns": "2-vertex line segments",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\nvar segments = turf.lineSegment(polygon);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 549,
									"name": "feature",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polygon or LineString"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FeatureCollection",
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "LineString"
															},
															{
																"type": "reference",
																"name": "MultiLineString"
															},
															{
																"type": "reference",
																"name": "Polygon"
															},
															{
																"type": "reference",
																"name": "MultiPolygon"
															}
														]
													}
												]
											},
											{
												"type": "reference",
												"name": "Feature",
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "LineString"
															},
															{
																"type": "reference",
																"name": "MultiLineString"
															},
															{
																"type": "reference",
																"name": "Polygon"
															},
															{
																"type": "reference",
																"name": "MultiPolygon"
															}
														]
													}
												]
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "LineString"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "line.ts",
							"line": 136,
							"character": 23
						}
					]
				},
				{
					"id": 550,
					"name": "slice",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 551,
							"name": "slice",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes aLineString, a start Point, and a stop point\nand returns a subsection of the line in-between those points.\nThe start & stop points don't need to fall exactly on the line.",
								"text": "This can be useful for extracting only the part of a route between waypoints.\n",
								"returns": "sliced line",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line = turf.lineString([\n    [-77.031669, 38.878605],\n    [-77.029609, 38.881946],\n    [-77.020339, 38.884084],\n    [-77.025661, 38.885821],\n    [-77.021884, 38.889563],\n    [-77.019824, 38.892368]\n]);\nvar start = turf.point([-77.029609, 38.881946]);\nvar stop = turf.point([-77.021884, 38.889563]);\n\nvar sliced = turf.lineSlice(start, stop, line);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 552,
									"name": "startPt",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "starting point"
									},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								},
								{
									"id": 553,
									"name": "stopPt",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "stopping point"
									},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								},
								{
									"id": 554,
									"name": "line",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "line to slice"
									},
									"type": {
										"type": "reference",
										"name": "Feature",
										"typeArguments": [
											{
												"type": "reference",
												"name": "LineString"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "LineString"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "line.ts",
							"line": 165,
							"character": 21
						}
					]
				},
				{
					"id": 555,
					"name": "sliceAlong",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 556,
							"name": "sliceAlong",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a LineString, a specified distance along the line to a start Point,\nand a specified  distance along the line to a stop point\nand returns a subsection of the line in-between those points.",
								"text": "This can be useful for extracting only the part of a route between two distances.\n",
								"returns": "sliced line",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line = turf.lineString([[7, 45], [9, 45], [14, 40], [14, 41]]);\nvar start = 12.5;\nvar stop = 25;\nvar sliced = turf.lineSliceAlong(line, start, stop, {units: 'miles'});\n"
									}
								]
							},
							"parameters": [
								{
									"id": 557,
									"name": "line",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input line"
									},
									"type": {
										"type": "reference",
										"name": "Feature",
										"typeArguments": [
											{
												"type": "reference",
												"name": "LineString"
											}
										]
									}
								},
								{
									"id": 558,
									"name": "startDist",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "distance along the line to starting point"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 559,
									"name": "stopDist",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "distance along the line to ending point"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 560,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(units: can be degrees, radians, miles, or kilometers)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 561,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 562,
													"name": "units",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "line.ts",
															"line": 188,
															"character": 113
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.Units"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														562
													]
												}
											],
											"sources": [
												{
													"fileName": "line.ts",
													"line": 188,
													"character": 106
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "LineString"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "line.ts",
							"line": 188,
							"character": 26
						}
					]
				},
				{
					"id": 563,
					"name": "split",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 564,
							"name": "split",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Split a LineString by another GeoJSON Feature.",
								"returns": "Split LineStrings",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line = turf.lineString([[120, -25], [145, -25]]);\nvar splitter = turf.lineString([[130, -15], [130, -35]]);\n\nvar split = turf.lineSplit(line, splitter);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 565,
									"name": "line",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "LineString Feature to split"
									},
									"type": {
										"type": "reference",
										"name": "Feature",
										"typeArguments": [
											{
												"type": "reference",
												"name": "LineString"
											}
										]
									}
								},
								{
									"id": 566,
									"name": "splitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Feature used to split line"
									},
									"type": {
										"type": "reference",
										"name": "Feature",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Point"
													},
													{
														"type": "reference",
														"name": "MultiPoint"
													},
													{
														"type": "reference",
														"name": "LineString"
													},
													{
														"type": "reference",
														"name": "MultiLineString"
													},
													{
														"type": "reference",
														"name": "Polygon"
													},
													{
														"type": "reference",
														"name": "MultiPolygon"
													}
												]
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "LineString"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "line.ts",
							"line": 204,
							"character": 21
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						507,
						514,
						521,
						529,
						533,
						540,
						547,
						550,
						555,
						563
					]
				}
			],
			"sources": [
				{
					"fileName": "line.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 567,
			"name": "\"misc\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/misc.ts",
			"comment": {
				"shortText": "Turf MISC functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 582,
					"name": "isClockwise",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 583,
							"name": "isClockwise",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a ring and return true or false whether or not the ring is clockwise or counter-clockwise.",
								"returns": "true/false",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar clockwiseRing = turf.lineString([[0,0],[1,1],[1,0],[0,0]]);\nvar counterClockwiseRing = turf.lineString([[0,0],[1,0],[1,1],[0,0]]);\n\nturf.booleanClockwise(clockwiseRing)\n//=true\nturf.booleanClockwise(counterClockwiseRing)\n//=false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 584,
									"name": "line",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "to be evaluated"
									},
									"type": {
										"type": "reference",
										"name": "Feature",
										"typeArguments": [
											{
												"type": "reference",
												"name": "LineString"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "misc.ts",
							"line": 93,
							"character": 27
						}
					]
				},
				{
					"id": 568,
					"name": "kinks",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 569,
							"name": "kinks",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a linestring, multi-linestring, multi-polygon, or polygon and returns points at all self-intersections.",
								"returns": "self-intersections",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar poly = turf.polygon([[\n  [-12.034835, 8.901183],\n  [-12.060413, 8.899826],\n  [-12.03638, 8.873199],\n  [-12.059383, 8.871418],\n  [-12.034835, 8.901183]\n]]);\n\nvar kinks = turf.kinks(poly);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 570,
									"name": "feature",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input feature"
									},
									"type": {
										"type": "reference",
										"name": "Feature",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "LineString"
													},
													{
														"type": "reference",
														"name": "MultiLineString"
													},
													{
														"type": "reference",
														"name": "Polygon"
													},
													{
														"type": "reference",
														"name": "MultiPolygon"
													}
												]
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "misc.ts",
							"line": 28,
							"character": 21
						}
					]
				},
				{
					"id": 571,
					"name": "mask",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 572,
							"name": "mask",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes any type of polygon and an optional mask and returns a polygon exterior ring with holes.",
								"returns": "Masked Polygon (exterior ring with holes).",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar polygon = turf.polygon([[[112, -21], [116, -36], [146, -39], [153, -24], [133, -10], [112, -21]]]);\nvar mask = turf.polygon([[[90, -55], [170, -55], [170, 10], [90, 10], [90, -55]]]);\n\nvar masked = turf.mask(polygon, mask);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 573,
									"name": "polygon1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Polygon used as interior rings or holes."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FeatureCollection",
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Polygon"
															},
															{
																"type": "reference",
																"name": "MultiPolygon"
															}
														]
													}
												]
											},
											{
												"type": "reference",
												"name": "Feature",
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Polygon"
															},
															{
																"type": "reference",
																"name": "MultiPolygon"
															}
														]
													}
												]
											}
										]
									}
								},
								{
									"id": 574,
									"name": "polygon2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Polygon used as the exterior ring (if undefined, the world extent is used)"
									},
									"type": {
										"type": "reference",
										"name": "Feature",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Polygon"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "misc.ts",
							"line": 44,
							"character": 20
						}
					]
				},
				{
					"id": 578,
					"name": "sample",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 579,
							"name": "sample",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a FeatureCollection and returns a FeatureCollection with given number of features at random.",
								"returns": "a FeatureCollection with `n` features",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar points = turf.randomPoint(100, {bbox: [-80, 30, -60, 60]});\n\nvar sample = turf.sample(points, 5);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 580,
									"name": "fcoll",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "FeatureCollection of input features"
									},
									"type": {
										"type": "reference",
										"name": "FeatureCollection",
										"typeArguments": [
											{
												"type": "reference",
												"name": "GeometryObject"
											}
										]
									}
								},
								{
									"id": 581,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "number of features to select"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "GeometryObject"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "misc.ts",
							"line": 75,
							"character": 22
						}
					]
				},
				{
					"id": 575,
					"name": "unkinkPolygon",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 576,
							"name": "unkinkPolygon",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a kinked polygon and returns a feature collection of polygons that have no kinks.\nUses [simplepolygon](https://github.com/mclaeysb/simplepolygon) internally.",
								"returns": "Unkinked polygons",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar poly = turf.polygon([[[0, 0], [2, 0], [0, 2], [2, 2], [0, 0]]]);\n\nvar result = turf.unkinkPolygon(poly);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 577,
									"name": "polygon",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Polygon or MultiPolygon"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FeatureCollection",
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Polygon"
															},
															{
																"type": "reference",
																"name": "MultiPolygon"
															}
														]
													}
												]
											},
											{
												"type": "reference",
												"name": "Feature",
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Polygon"
															},
															{
																"type": "reference",
																"name": "MultiPolygon"
															}
														]
													}
												]
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "misc.ts",
							"line": 59,
							"character": 29
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						582,
						568,
						571,
						578,
						575
					]
				}
			],
			"sources": [
				{
					"fileName": "misc.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 585,
			"name": "\"prop\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/prop.ts",
			"comment": {
				"shortText": "Turf property functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 586,
					"name": "collect",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 587,
							"name": "collect",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Merges a specified property from a FeatureCollection of points into a\nFeatureCollection of polygons. Given an `inProperty` on points and an `outProperty`\nfor polygons, this finds every point that lies within each polygon, collects the\n`inProperty` values from those points, and adds them as an array to `outProperty`\non the polygon.",
								"returns": "polygons with properties listed based on `outField`",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar poly1 = turf.polygon([[[0,0],[10,0],[10,10],[0,10],[0,0]]]);\nvar poly2 = turf.polygon([[[10,0],[20,10],[20,20],[20,0],[10,0]]]);\nvar polyFC = turf.featureCollection([poly1, poly2]);\nvar pt1 = turf.point([5,5], {population: 200});\nvar pt2 = turf.point([1,3], {population: 600});\nvar pt3 = turf.point([14,2], {population: 100});\nvar pt4 = turf.point([13,1], {population: 200});\nvar pt5 = turf.point([19,7], {population: 300});\nvar pointFC = turf.featureCollection([pt1, pt2, pt3, pt4, pt5]);\nvar collected = turf.collect(polyFC, pointFC, 'population', 'values');\nvar values = collected.features[0].properties.values\n//=values => [200, 600]\n\n//addToMap\nvar addToMap = [pointFC, collected]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 588,
									"name": "polygons",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "polygons with values on which to aggregate"
									},
									"type": {
										"type": "reference",
										"name": "FeatureCollection",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Polygon"
											}
										]
									}
								},
								{
									"id": 589,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "points to be aggregated"
									},
									"type": {
										"type": "reference",
										"name": "FeatureCollection",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Point"
											}
										]
									}
								},
								{
									"id": 590,
									"name": "inProperty",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "property to be nested from"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 591,
									"name": "outProperty",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "property to be nested into"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "prop.ts",
							"line": 41,
							"character": 23
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						586
					]
				}
			],
			"sources": [
				{
					"fileName": "prop.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 592,
			"name": "\"rand\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/rand.ts",
			"comment": {
				"shortText": "Turf RANDOM functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 602,
					"name": "linestring",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 603,
							"name": "linestring",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a random linestring.",
								"returns": "GeoJSON FeatureCollection of LineString",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar lineStrings = turf.randomLineString(25, {bbox: [-180, -90, 180, 90]})\n//=lineStrings\n"
									}
								]
							},
							"parameters": [
								{
									"id": 604,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "How many geometries will be generated (if undefined, default value is 1)"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 605,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(bbox: a bounding box inside of which geometries are placed,\nnum_vertices: is how many coordinates each LineString will contain,\nmax_length: is the maximum number of decimal degrees that a vertex can be from its predecessor,\nmax_rotation=Math: is the maximum number of radians that a line segment can turn from the previous segment.)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 606,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 607,
													"name": "bbox",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "rand.ts",
															"line": 53,
															"character": 53
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.BBox"
													}
												},
												{
													"id": 609,
													"name": "max_length",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "rand.ts",
															"line": 53,
															"character": 96
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 610,
													"name": "max_rotation",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "rand.ts",
															"line": 53,
															"character": 118
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 608,
													"name": "num_vertices",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "rand.ts",
															"line": 53,
															"character": 77
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														607,
														609,
														610,
														608
													]
												}
											],
											"sources": [
												{
													"fileName": "rand.ts",
													"line": 53,
													"character": 47
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "LineString"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "rand.ts",
							"line": 53,
							"character": 26
						}
					]
				},
				{
					"id": 596,
					"name": "point",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 597,
							"name": "point",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a random point.",
								"returns": "GeoJSON FeatureCollection of points",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar points = turf.randomPoint(25, {bbox: [-180, -90, 180, 90]})\n//=points\n"
									}
								]
							},
							"parameters": [
								{
									"id": 598,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "How many geometries will be generated (if undefined, default value is 1)"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 599,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(bbox: a bounding box inside of which geometries are placed.)"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 600,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 601,
													"name": "bbox",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "rand.ts",
															"line": 35,
															"character": 48
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.BBox"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														601
													]
												}
											],
											"sources": [
												{
													"fileName": "rand.ts",
													"line": 35,
													"character": 42
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "rand.ts",
							"line": 35,
							"character": 21
						}
					]
				},
				{
					"id": 611,
					"name": "polygon",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 612,
							"name": "polygon",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a random polygon.",
								"returns": "GeoJSON FeatureCollection of LineString",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar polygons = turf.randomPolygon(25, {bbox: [-180, -90, 180, 90]})\n//=polygons\n"
									}
								]
							},
							"parameters": [
								{
									"id": 613,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "How many geometries will be generated (if undefined, default value is 1)"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 614,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 615,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 616,
													"name": "bbox",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "rand.ts",
															"line": 70,
															"character": 50
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.BBox"
													}
												},
												{
													"id": 618,
													"name": "max_radial_length",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "rand.ts",
															"line": 70,
															"character": 99
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 617,
													"name": "num_vertices",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "rand.ts",
															"line": 70,
															"character": 74
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														616,
														618,
														617
													]
												}
											],
											"sources": [
												{
													"fileName": "rand.ts",
													"line": 70,
													"character": 44
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "LineString"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "rand.ts",
							"line": 70,
							"character": 23
						}
					]
				},
				{
					"id": 593,
					"name": "position",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 594,
							"name": "position",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a random position within a bounding box.",
								"returns": "Position [longitude, latitude]",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar position = turf.randomPosition([-180, -90, 180, 90])\n//=position\n"
									}
								]
							},
							"parameters": [
								{
									"id": 595,
									"name": "bbox",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "turf.BBox"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "rand.ts",
							"line": 20,
							"character": 24
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						602,
						596,
						611,
						593
					]
				}
			],
			"sources": [
				{
					"fileName": "rand.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 619,
			"name": "\"test_data\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/test_data.ts",
			"children": [
				{
					"id": 620,
					"name": "testData1",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 621,
							"name": "testData1",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "FeatureCollection"
							}
						}
					],
					"sources": [
						{
							"fileName": "test_data.ts",
							"line": 6,
							"character": 25
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						620
					]
				}
			],
			"sources": [
				{
					"fileName": "test_data.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 622,
			"name": "\"units\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/units.ts",
			"comment": {
				"shortText": "Turf UNIT CONVERSION functions.\nhttp://turfjs.org/docs/"
			},
			"sources": [
				{
					"fileName": "units.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 623,
			"name": "\"xform\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/xform.ts",
			"comment": {
				"shortText": "Turf TRANSFORMATION functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 624,
					"name": "rotate",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 625,
							"name": "rotate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Rotates any geojson Feature or Geometry of a specified angle, around its `centroid` or a given `pivot` point;\nall rotations follow the [right-hand rule] (https://en.wikipedia.org/wiki/Right-hand_rule)",
								"returns": "the rotated GeoJSON feature",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\nvar options = {pivot: [0, 25]};\nvar rotatedPoly = turf.transformRotate(poly, 10, options);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 626,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "object to be rotated"
									},
									"type": {
										"type": "reference",
										"name": "turf.AllGeoJSON"
									}
								},
								{
									"id": 627,
									"name": "angle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "of rotation (along the vertical axis), from North in decimal degrees, negative clockwise"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 628,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(pivot: point around which the rotation will be performed,\nmutate: allows GeoJSON input to be mutated (significant performance increase if true))"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 629,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 631,
													"name": "mutate",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "xform.ts",
															"line": 27,
															"character": 97
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 630,
													"name": "pivot",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "xform.ts",
															"line": 27,
															"character": 77
														}
													],
													"type": {
														"type": "reference",
														"name": "Point"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														631,
														630
													]
												}
											],
											"sources": [
												{
													"fileName": "xform.ts",
													"line": 27,
													"character": 70
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "turf.AllGeoJSON"
							}
						}
					],
					"sources": [
						{
							"fileName": "xform.ts",
							"line": 27,
							"character": 22
						}
					]
				},
				{
					"id": 642,
					"name": "scale",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 643,
							"name": "scale",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Scale a GeoJSON from a given point by a factor of scaling (ex: factor=2 would make the GeoJSON 200% larger).\nIf a FeatureCollection is provided, the origin point will be calculated based on each individual Feature.",
								"returns": "scaled GeoJSON",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\nvar scaledPoly = turf.transformScale(poly, 3);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 644,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON to be scaled"
									},
									"type": {
										"type": "reference",
										"name": "turf.AllGeoJSON"
									}
								},
								{
									"id": 645,
									"name": "factor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "of scaling, positive or negative values greater than 0"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 646,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(origin: Point from which the scaling will occur (string options: sw/se/nw/ne/center/centroid),\nmutate: allows GeoJSON input to be mutated (significant performance increase if true))"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 647,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 649,
													"name": "mutate",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "xform.ts",
															"line": 65,
															"character": 152
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 648,
													"name": "origin",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "xform.ts",
															"line": 65,
															"character": 78
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "stringLiteral",
																"value": "sw"
															},
															{
																"type": "stringLiteral",
																"value": "se"
															},
															{
																"type": "stringLiteral",
																"value": "nw"
															},
															{
																"type": "stringLiteral",
																"value": "ne"
															},
															{
																"type": "stringLiteral",
																"value": "center"
															},
															{
																"type": "stringLiteral",
																"value": "centroid"
															},
															{
																"type": "reference",
																"name": "Feature",
																"typeArguments": [
																	{
																		"type": "reference",
																		"name": "Point"
																	}
																]
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														649,
														648
													]
												}
											],
											"sources": [
												{
													"fileName": "xform.ts",
													"line": 65,
													"character": 70
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "turf.AllGeoJSON"
							}
						}
					],
					"sources": [
						{
							"fileName": "xform.ts",
							"line": 65,
							"character": 21
						}
					]
				},
				{
					"id": 632,
					"name": "translate",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 633,
							"name": "translate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Moves any geojson Feature or Geometry of a specified distance along a Rhumb Line\non the provided direction angle.",
								"returns": "the translated GeoJSON object",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\nvar translatedPoly = turf.transformTranslate(poly, 100, 35);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 634,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "object to be translated"
									},
									"type": {
										"type": "reference",
										"name": "turf.AllGeoJSON"
									}
								},
								{
									"id": 635,
									"name": "distance",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "length of the motion; negative values determine motion in opposite direction"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 636,
									"name": "direction",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "of the motion; angle from North in decimal degrees, positive clockwise"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 637,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Optional parameters\n(units: in which `distance` will be express; miles, kilometers, degrees, or radians,\nzTranslation: length of the vertical motion, same unit of distance,\nmutate: allows GeoJSON input to be mutated (significant performance increase if true))"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 638,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 641,
													"name": "mutate",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "xform.ts",
															"line": 47,
															"character": 142
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 639,
													"name": "units",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "xform.ts",
															"line": 47,
															"character": 101
														}
													],
													"type": {
														"type": "reference",
														"name": "turf.Units"
													}
												},
												{
													"id": 640,
													"name": "zTranslation",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "xform.ts",
															"line": 47,
															"character": 126
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														641,
														639,
														640
													]
												}
											],
											"sources": [
												{
													"fileName": "xform.ts",
													"line": 47,
													"character": 94
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "turf.AllGeoJSON"
							}
						}
					],
					"sources": [
						{
							"fileName": "xform.ts",
							"line": 47,
							"character": 25
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						624,
						642,
						632
					]
				}
			],
			"sources": [
				{
					"fileName": "xform.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				650,
				1,
				2,
				13,
				25,
				148,
				168,
				207,
				234,
				275,
				379,
				430,
				468,
				505,
				506,
				567,
				585,
				592,
				619,
				622,
				623
			]
		}
	]
}