{
	"id": 0,
	"name": "mobius-turf",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 641,
			"name": "\"_export\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/_export.ts",
			"sources": [
				{
					"fileName": "_export.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1,
			"name": "\"assert\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/assert.ts",
			"comment": {
				"shortText": "Turf ASSERTIONS functions.\nhttp://turfjs.org/docs/"
			},
			"sources": [
				{
					"fileName": "assert.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 2,
			"name": "\"bbox\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/bbox.ts",
			"comment": {
				"shortText": "Turf bbox functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 12,
					"name": "clip",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 13,
							"name": "clip",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a Feature and a bbox and clips the feature to the bbox using [lineclip](https://github.com/mapbox/lineclip).\nMay result in degenerate edges when clipping Polygons.",
								"returns": "clipped Feature",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar bbox = [0, 0, 10, 10];\nvar poly = turf.polygon([[[2, 2], [8, 4], [12, 8], [3, 7], [2, 2]]]);\n\nvar clipped = turf.bboxClip(poly, bbox);\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 14,
									"name": "feature",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "feature to clip to the bbox"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 15,
									"name": "bbox",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "extent in [minX, minY, maxX, maxY] order"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 16,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 17,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 18,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "bbox.ts",
							"line": 56,
							"character": 20
						}
					]
				},
				{
					"id": 3,
					"name": "polygon",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 4,
							"name": "polygon",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a bbox and returns an equivalent Polygon.",
								"returns": "a Polygon representation of the bounding box",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar bbox = [0, 0, 10, 10];\n\nvar poly = turf.bboxPolygon(bbox);\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 5,
									"name": "bbox",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "extent in [minX, minY, maxX, maxY] order"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 6,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 7,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 8,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "bbox.ts",
							"line": 22,
							"character": 23
						}
					]
				},
				{
					"id": 9,
					"name": "square",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 10,
							"name": "square",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a bounding box and calculates the minimum square bounding box that\nwould contain the input.",
								"returns": "a square surrounding `bbox`",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar bbox = [-20, -20, -15, 0];\nvar squared = turf.square(bbox);\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 11,
									"name": "bbox",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "extent in [west, south, east, north] order"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "Object"
									},
									{
										"type": "intrinsic",
										"name": "Object"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "bbox.ts",
							"line": 38,
							"character": 22
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						12,
						3,
						9
					]
				}
			],
			"sources": [
				{
					"fileName": "bbox.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 19,
			"name": "\"bool\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/bool.ts",
			"comment": {
				"shortText": "Turf graphical boolean functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 20,
					"name": "difference",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 21,
							"name": "difference",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Finds the difference between two polygons by clipping the second polygon from the first.",
								"returns": "a Polygon or MultiPolygon feature showing the area of `polygon1` excluding the area of `polygon2` (if empty returns `null`)",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar polygon1 = turf.polygon([[\n  [128, -26],\n  [141, -26],\n  [141, -21],\n  [128, -21],\n  [128, -26]\n]], {\n  \"fill\": \"#F00\",\n  \"fill-opacity\": 0.1\n});\nvar polygon2 = turf.polygon([[\n  [126, -28],\n  [140, -28],\n  [140, -20],\n  [126, -20],\n  [126, -28]\n]], {\n  \"fill\": \"#00F\",\n  \"fill-opacity\": 0.1\n});\n\nvar difference = turf.difference(polygon1, polygon2);\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 22,
									"name": "poly1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input Polygon feature"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 23,
									"name": "poly2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polygon feature to difference from polygon1"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Polygon"
											},
											{
												"type": "reference",
												"name": "MultiPolygon"
											}
										]
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 24,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 25,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 26,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "bool.ts",
							"line": 42,
							"character": 26
						}
					]
				},
				{
					"id": 27,
					"name": "intersect",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 28,
							"name": "intersect",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes two Polygon and finds their intersection. If they share a border, returns the border; if they don't intersect, returns undefined.",
								"returns": "returns a feature representing the point(s) they share (in case of a Point  or MultiPoint), the borders they share (in case of a LineString or a MultiLineString), the area they share (in case of Polygon or MultiPolygon). If they do not share any point, returns `null`.",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar poly1 = turf.polygon([[\n  [-122.801742, 45.48565],\n  [-122.801742, 45.60491],\n  [-122.584762, 45.60491],\n  [-122.584762, 45.48565],\n  [-122.801742, 45.48565]\n]]);\n\nvar poly2 = turf.polygon([[\n  [-122.520217, 45.535693],\n  [-122.64038, 45.553967],\n  [-122.720031, 45.526554],\n  [-122.669906, 45.507309],\n  [-122.723464, 45.446643],\n  [-122.532577, 45.408574],\n  [-122.487258, 45.477466],\n  [-122.520217, 45.535693]\n]]);\n\nvar intersection = turf.intersect(poly1, poly2);\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 29,
									"name": "poly1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the first polygon"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 30,
									"name": "poly2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the second polygon"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 31,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 32,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 33,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "bool.ts",
							"line": 75,
							"character": 25
						}
					]
				},
				{
					"id": 34,
					"name": "union",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 35,
							"name": "union",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes two or more Polygon and returns a combined polygon. If the input polygons are not contiguous, this function returns a MultiPolygon feature.",
								"returns": "a combined Polygon or MultiPolygon feature",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar poly1 = turf.polygon([[\n    [-82.574787, 35.594087],\n    [-82.574787, 35.615581],\n    [-82.545261, 35.615581],\n    [-82.545261, 35.594087],\n    [-82.574787, 35.594087]\n]], {\"fill\": \"#0f0\"});\nvar poly2 = turf.polygon([[\n    [-82.560024, 35.585153],\n    [-82.560024, 35.602602],\n    [-82.52964, 35.602602],\n    [-82.52964, 35.585153],\n    [-82.560024, 35.585153]\n]], {\"fill\": \"#00f\"});\n\nvar union = turf.union([poly1, poly2]);\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 36,
									"name": "polys",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "An array of polygons to combine"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Polygon"
											},
											{
												"type": "reference",
												"name": "MultiPolygon"
											}
										]
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 37,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 38,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 39,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "bool.ts",
							"line": 103,
							"character": 21
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						20,
						27,
						34
					]
				}
			],
			"sources": [
				{
					"fileName": "bool.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 40,
			"name": "\"calc\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/calc.ts",
			"comment": {
				"shortText": "Turf measurement functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 41,
					"name": "area",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 42,
							"name": "area",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes one or more features and returns their area in square meters.",
								"returns": "area in square meters",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar polygon = turf.polygon([[[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]]);\n\nvar area = turf.area(polygon);\n\n//addToMap\nvar addToMap = [polygon]\npolygon.properties.area = area\n"
									}
								]
							},
							"parameters": [
								{
									"id": 43,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input GeoJSON feature(s)"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 25,
							"character": 20
						}
					]
				},
				{
					"id": 44,
					"name": "bearing",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 45,
							"name": "bearing",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes two Point|points and finds the geographic bearing between them,\ni.e. the angle measured in degrees from the north line (0 degrees)",
								"returns": "bearing in decimal degrees, between -180 and 180 degrees (positive clockwise)",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar point1 = turf.point([-75.343, 39.984]);\nvar point2 = turf.point([-75.534, 39.123]);\n\nvar bearing = turf.bearing(point1, point2);\n\n//addToMap\nvar addToMap = [point1, point2]\npoint1.properties['marker-color'] = '#f00'\npoint2.properties['marker-color'] = '#0f0'\npoint1.properties.bearing = bearing\n"
									}
								]
							},
							"parameters": [
								{
									"id": 46,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "starting Point"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 47,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "ending Point"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 48,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 50,
							"character": 23
						}
					]
				},
				{
					"id": 49,
					"name": "center",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 50,
							"name": "center",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a Feature or FeatureCollection and returns the absolute center point of all features.",
								"returns": "a Point feature at the absolute center point of all input features",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar features = turf.featureCollection([\n  turf.point( [-97.522259, 35.4691]),\n  turf.point( [-97.502754, 35.463455]),\n  turf.point( [-97.508269, 35.463245])\n]);\n\nvar center = turf.center(features);\n\n//addToMap\nvar addToMap = [features, center]\ncenter.properties['marker-size'] = 'large';\ncenter.properties['marker-color'] = '#000';\n"
									}
								]
							},
							"parameters": [
								{
									"id": 51,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON to be centered"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 52,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 53,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 54,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 55,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 75,
							"character": 22
						}
					]
				},
				{
					"id": 56,
					"name": "centerOfMass",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 57,
							"name": "centerOfMass",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes any Feature or a FeatureCollection and returns its [center of mass](https://en.wikipedia.org/wiki/Center_of_mass) using this formula: [Centroid of Polygon](https://en.wikipedia.org/wiki/Centroid#Centroid_of_polygon).",
								"returns": "the center of mass",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);\n\nvar center = turf.centerOfMass(polygon);\n\n//addToMap\nvar addToMap = [polygon, center]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 58,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON to be centered"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 59,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 60,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 61,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 62,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 93,
							"character": 28
						}
					]
				},
				{
					"id": 63,
					"name": "centroid",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 64,
							"name": "centroid",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes one or more features and calculates the centroid using the mean of all vertices.\nThis lessens the effect of small islands and artifacts when calculating the centroid of a set of polygons.",
								"returns": "the centroid of the input features",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);\n\nvar centroid = turf.centroid(polygon);\n\n//addToMap\nvar addToMap = [polygon, centroid]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 65,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON to be centered"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 66,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 67,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 68,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 69,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 112,
							"character": 24
						}
					]
				},
				{
					"id": 70,
					"name": "destination",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 71,
							"name": "destination",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a Point and calculates the location of a destination point given a distance in degrees, radians, miles, or kilometers; and bearing in degrees. This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.",
								"returns": "destination point",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar point = turf.point([-75.343, 39.984]);\nvar distance = 50;\nvar bearing = 90;\nvar options = {units: 'miles'};\n\nvar destination = turf.destination(point, distance, bearing, options);\n\n//addToMap\nvar addToMap = [point, destination]\ndestination.properties['marker-color'] = '#f00';\npoint.properties['marker-color'] = '#0f0';\n"
									}
								]
							},
							"parameters": [
								{
									"id": 72,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "starting point"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 73,
									"name": "distance",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "distance from the origin point"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 74,
									"name": "bearing",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "ranging from -180 to 180"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 75,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 76,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 77,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 78,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 139,
							"character": 27
						}
					]
				},
				{
					"id": 79,
					"name": "distance",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 80,
							"name": "distance",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the distance between a point P on a segment AB.",
								"returns": "distance\n"
							},
							"parameters": [
								{
									"id": 81,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "external point"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 82,
									"name": "seg_point1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "first segment point"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 83,
									"name": "seg_point2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "second segment point"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 154,
							"character": 24
						}
					]
				},
				{
					"id": 84,
					"name": "envelope",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 85,
							"name": "envelope",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes any number of features and returns a rectangular Polygon that encompasses all vertices.",
								"returns": "a rectangular Polygon feature that encompasses all vertices",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar features = turf.featureCollection([\n  turf.point([-75.343, 39.984], {\"name\": \"Location A\"}),\n  turf.point([-75.833, 39.284], {\"name\": \"Location B\"}),\n  turf.point([-75.534, 39.123], {\"name\": \"Location C\"})\n]);\n\nvar enveloped = turf.envelope(features);\n\n//addToMap\nvar addToMap = [features, enveloped];\n"
									}
								]
							},
							"parameters": [
								{
									"id": 86,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input features"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 87,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 88,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 89,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 175,
							"character": 24
						}
					]
				},
				{
					"id": 90,
					"name": "greatCircle",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 91,
							"name": "greatCircle",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Calculate great circles routes as LineString",
								"returns": "great circle line feature",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar start = turf.point([-122, 48]);\nvar end = turf.point([-77, 39]);\n\nvar greatCircle = turf.greatCircle(start, end, {'name': 'Seattle to DC'});\n\n//addToMap\nvar addToMap = [start, end, greatCircle]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 92,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "source point feature"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 93,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "destination point feature"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 94,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "LineString"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 95,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 96,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 97,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 199,
							"character": 27
						}
					]
				},
				{
					"id": 98,
					"name": "len",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 99,
							"name": "len",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a GeoJSON and measures its length in the specified units, (Multi)Point's distance are ignored.",
								"returns": "length of GeoJSON",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line = turf.lineString([[115, -32], [131, -22], [143, -25], [150, -34]]);\nvar length = turf.length(line, {units: 'miles'});\n\n//addToMap\nvar addToMap = [line];\nline.properties.distance = length;\n"
									}
								]
							},
							"parameters": [
								{
									"id": 100,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON to measure"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 101,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 218,
							"character": 19
						}
					]
				},
				{
					"id": 102,
					"name": "midpoint",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 103,
							"name": "midpoint",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes two Point|points and returns a point midway between them.\nThe midpoint is calculated geodesically, meaning the curvature of the earth is taken into account.",
								"returns": "a point midway between `pt1` and `pt2`",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar point1 = turf.point([144.834823, -37.771257]);\nvar point2 = turf.point([145.14244, -37.830937]);\n\nvar midpoint = turf.midpoint(point1, point2);\n\n//addToMap\nvar addToMap = [point1, point2, midpoint];\nmidpoint.properties['marker-color'] = '#f00';\n"
									}
								]
							},
							"parameters": [
								{
									"id": 104,
									"name": "point1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "first point"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 105,
									"name": "point2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "second point"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 106,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 107,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 108,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 239,
							"character": 24
						}
					]
				},
				{
					"id": 109,
					"name": "nearestPoint",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 110,
							"name": "nearestPoint",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a reference Point|point and a FeatureCollection of Features\nwith Point geometries and returns the\npoint from the FeatureCollection closest to the reference. This calculation\nis geodesic.",
								"returns": "the closest point in the set to the reference point",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar targetPoint = turf.point([28.965797, 41.010086], {\"marker-color\": \"#0F0\"});\nvar points = turf.featureCollection([\n    turf.point([28.973865, 41.011122]),\n    turf.point([28.948459, 41.024204]),\n    turf.point([28.938674, 41.013324])\n]);\n\nvar nearest = turf.nearestPoint(targetPoint, points);\n\n//addToMap\nvar addToMap = [targetPoint, points, nearest];\nnearest.properties['marker-color'] = '#F00';\n"
									}
								]
							},
							"parameters": [
								{
									"id": 111,
									"name": "targetPoint",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the reference point"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 112,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "against input point set"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "NearestPoint"
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 266,
							"character": 28
						}
					]
				},
				{
					"id": 113,
					"name": "nearestPointOnLine",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 114,
							"name": "nearestPointOnLine",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a Point and a LineString and calculates the closest Point on the (Multi)LineString.",
								"returns": "closest point on the `line` to `point`. The properties object will contain three values: `index`: closest point was found on nth line part, `dist`: distance between pt and the closest point, `location`: distance along the line between start and the closest point.",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line = turf.lineString([\n    [-77.031669, 38.878605],\n    [-77.029609, 38.881946],\n    [-77.020339, 38.884084],\n    [-77.025661, 38.885821],\n    [-77.021884, 38.889563],\n    [-77.019824, 38.892368]\n]);\nvar pt = turf.point([-77.037076, 38.884017]);\n\nvar snapped = turf.nearestPointOnLine(line, pt, {units: 'miles'});\n\n//addToMap\nvar addToMap = [line, pt, snapped];\nsnapped.properties['marker-color'] = '#00f';\n"
									}
								]
							},
							"parameters": [
								{
									"id": 115,
									"name": "lines",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "lines to snap to"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 116,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "point to snap from"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 117,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "NearestPointOnLine"
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 295,
							"character": 34
						}
					]
				},
				{
					"id": 118,
					"name": "pointToLineDistance",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 119,
							"name": "pointToLineDistance",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the minimum distance between a Point and a LineString, being the distance from a line the\nminimum distance between the point and any segment of the `LineString`.",
								"returns": "distance between point and line",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar pt = turf.point([0, 0]);\nvar line = turf.lineString([[1, 1],[-1, 1]]);\n\nvar distance = turf.pointToLineDistance(pt, line, {units: 'miles'});\n//=69.11854715938406\n"
									}
								]
							},
							"parameters": [
								{
									"id": 120,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Feature or Geometry"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 121,
									"name": "line",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Feature or Geometry"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 122,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 316,
							"character": 35
						}
					]
				},
				{
					"id": 123,
					"name": "polygonTangents",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 124,
							"name": "polygonTangents",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Finds the tangents of a Polygon|(Multi)Polygon from a Point.",
								"returns": "Feature Collection containing the two tangent points",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar polygon = turf.polygon([[[11, 0], [22, 4], [31, 0], [31, 11], [21, 15], [11, 11], [11, 0]]]);\nvar point = turf.point([61, 5]);\n\nvar tangents = turf.polygonTangents(point, polygon)\n\n//addToMap\nvar addToMap = [tangents, point, polygon];\n"
									}
								]
							},
							"parameters": [
								{
									"id": 125,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "to calculate the tangent points from"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 126,
									"name": "polygon",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "to get tangents from"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 127,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 128,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 129,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 335,
							"character": 31
						}
					]
				},
				{
					"id": 130,
					"name": "rhumbBearing",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 131,
							"name": "rhumbBearing",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes two Point|points and finds the bearing angle between them along a Rhumb line\ni.e. the angle measured in degrees start the north line (0 degrees)",
								"returns": "bearing from north in decimal degrees, between -180 and 180 degrees (positive clockwise)",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar point1 = turf.point([-75.343, 39.984], {\"marker-color\": \"#F00\"});\nvar point2 = turf.point([-75.534, 39.123], {\"marker-color\": \"#00F\"});\n\nvar bearing = turf.rhumbBearing(point1, point2);\n\n//addToMap\nvar addToMap = [point1, point2];\npoint1.properties.bearing = bearing;\npoint2.properties.bearing = bearing;\n"
									}
								]
							},
							"parameters": [
								{
									"id": 132,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "starting Point"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 133,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "ending Point"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 134,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 359,
							"character": 28
						}
					]
				},
				{
					"id": 135,
					"name": "rhumbDestination",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 136,
							"name": "rhumbDestination",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the destination Point having travelled the given distance along a Rhumb line from the\norigin Point with the (varant) given bearing.",
								"returns": "Destination point.",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar pt = turf.point([-75.343, 39.984], {\"marker-color\": \"F00\"});\nvar distance = 50;\nvar bearing = 90;\nvar options = {units: 'miles'};\n\nvar destination = turf.rhumbDestination(pt, distance, bearing, options);\n\n//addToMap\nvar addToMap = [pt, destination]\ndestination.properties['marker-color'] = '#00F';\n"
									}
								]
							},
							"parameters": [
								{
									"id": 137,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "starting point"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 138,
									"name": "distance",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "distance from the starting point"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 139,
									"name": "bearing",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "varant bearing angle ranging from -180 to 180 degrees from north"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 140,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 141,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 142,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 143,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 386,
							"character": 32
						}
					]
				},
				{
					"id": 144,
					"name": "rhumbDistance",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 145,
							"name": "rhumbDistance",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Calculates the distance along a rhumb line between two Point|points in degrees, radians,\nmiles, or kilometers.",
								"returns": "distance between the two points",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar from = turf.point([-75.343, 39.984]);\nvar to = turf.point([-75.534, 39.123]);\nvar options = {units: 'miles'};\n\nvar distance = turf.rhumbDistance(from, to, options);\n\n//addToMap\nvar addToMap = [from, to];\nfrom.properties.distance = distance;\nto.properties.distance = distance;\n"
									}
								]
							},
							"parameters": [
								{
									"id": 146,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 147,
									"name": "destination",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 148,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 411,
							"character": 29
						}
					]
				},
				{
					"id": 149,
					"name": "shortestPath",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 150,
							"name": "shortestPath",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the shortest LineString|path from Point|start to Point|end without colliding with\nany Feature in FeatureCollection<Polygon>| obstacles",
								"returns": "shortest path between start and end",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar start = [-5, -6];\nvar end = [9, -6];\nvar options = {\n  obstacles: turf.polygon([[[0, -7], [5, -7], [5, -3], [0, -3], [0, -7]]])\n};\n\nvar path = turf.shortestPath(start, end, options);\n\n//addToMap\nvar addToMap = [start, end, options.obstacles, path];\n"
									}
								]
							},
							"parameters": [
								{
									"id": 151,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "point"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 152,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "point"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 153,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "LineString"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 154,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 155,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 156,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 439,
							"character": 28
						}
					]
				},
				{
					"id": 157,
					"name": "voronoi",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 158,
							"name": "voronoi",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a FeatureCollection of points, and a bounding box, and returns a FeatureCollection\nof Voronoi polygons.",
								"text": "The Voronoi algorithim used comes from the d3-voronoi package.\n",
								"returns": "a set of polygons, one per input point.",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar options = {\n  bbox: [-70, 40, -60, 60]\n};\nvar points = turf.randomPoint(100, options);\nvar voronoiPolygons = turf.voronoi(points, options);\n\n//addToMap\nvar addToMap = [voronoiPolygons, points];\n"
									}
								]
							},
							"parameters": [
								{
									"id": 159,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "to find the Voronoi polygons around."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 160,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 161,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 162,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 163,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 463,
							"character": 23
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						41,
						44,
						49,
						56,
						63,
						70,
						79,
						84,
						90,
						98,
						102,
						109,
						113,
						118,
						123,
						130,
						135,
						144,
						149,
						157
					]
				}
			],
			"sources": [
				{
					"fileName": "calc.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 164,
			"name": "\"cluster\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/cluster.ts",
			"comment": {
				"shortText": "Turf AGGREGATION functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 165,
					"name": "dbscan",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 166,
							"name": "dbscan",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a set of Point|points and partition them into clusters according to {@link DBSCAN's|https://en.wikipedia.org/wiki/DBSCAN} data clustering algorithm.",
								"returns": "Clustered Points with an additional two properties associated to each Feature:\n- {number} cluster - the associated clusterId\n- {string} dbscan - type of point it has been classified as ('core'|'edge'|'noise')",
								"tags": [
									{
										"tag": "example",
										"text": "\n// create random points with random z-values in their properties\nvar points = turf.randomPoint(100, {bbox: [0, 30, 20, 50]});\nvar maxDistance = 100;\nvar clustered = turf.clustersDbscan(points, maxDistance);\n\n//addToMap\nvar addToMap = [clustered];\n"
									}
								]
							},
							"parameters": [
								{
									"id": 167,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "to be clustered"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 168,
									"name": "maxDistance",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Maximum Distance between any point of the cluster to generate the clusters (kilometers only)"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 169,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "DbscanPoints"
							}
						}
					],
					"sources": [
						{
							"fileName": "cluster.ts",
							"line": 33,
							"character": 22
						}
					]
				},
				{
					"id": 174,
					"name": "get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 175,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get Cluster",
								"returns": "Single Cluster filtered by GeoJSON Properties",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar geojson = turf.featureCollection([\n    turf.point([0, 0], {'marker-symbol': 'circle'}),\n    turf.point([2, 4], {'marker-symbol': 'star'}),\n    turf.point([3, 6], {'marker-symbol': 'star'}),\n    turf.point([5, 1], {'marker-symbol': 'square'}),\n    turf.point([4, 2], {'marker-symbol': 'circle'})\n]);\n\n// Create a cluster using K-Means (adds `cluster` to GeoJSON properties)\nvar clustered = turf.clustersKmeans(geojson);\n\n// Retrieve first cluster (0)\nvar cluster = turf.getCluster(clustered, {cluster: 0});\n//= cluster\n\n// Retrieve cluster based on custom properties\nturf.getCluster(clustered, {'marker-symbol': 'circle'}).length;\n//= 2\nturf.getCluster(clustered, {'marker-symbol': 'square'}).length;\n//= 1\n"
									}
								]
							},
							"parameters": [
								{
									"id": 176,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Features"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 177,
									"name": "filter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Filter used on GeoJSON properties to get Cluster"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "GeometryObject"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 178,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 179,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 180,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "cluster.ts",
							"line": 89,
							"character": 19
						}
					]
				},
				{
					"id": 170,
					"name": "kmeans",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 171,
							"name": "kmeans",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a set of Point|points and partition them into clusters using the k-mean .\nIt uses the [k-means algorithm](https://en.wikipedia.org/wiki/K-means_clustering)",
								"returns": "Clustered Points with an additional two properties associated to each Feature:\n- {number} cluster - the associated clusterId\n- {[number, number]} centroid - Centroid of the cluster [Longitude, Latitude]",
								"tags": [
									{
										"tag": "example",
										"text": "\n// create random points with random z-values in their properties\nvar points = turf.randomPoint(100, {bbox: [0, 30, 20, 50]});\nvar options = {numberOfClusters: 7};\nvar clustered = turf.clustersKmeans(points, options);\n\n//addToMap\nvar addToMap = [clustered];\n"
									}
								]
							},
							"parameters": [
								{
									"id": 172,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "to be clustered"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 173,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "KmeansPoints"
							}
						}
					],
					"sources": [
						{
							"fileName": "cluster.ts",
							"line": 57,
							"character": 22
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						165,
						174,
						170
					]
				}
			],
			"sources": [
				{
					"fileName": "cluster.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 181,
			"name": "\"compare\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/compare.ts",
			"comment": {
				"shortText": "Turf BOOLEANS functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 182,
					"name": "contains",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 183,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Boolean-contains returns True if the second geometry is completely contained by the first geometry.\nThe interiors of both geometries must intersect and, the interior and boundary of the secondary (geometry b)\nmust not intersect the exterior of the primary (geometry a).\nBoolean-contains returns the exact opposite result of the `@turf/boolean-within`.",
								"returns": "true/false",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\nvar point = turf.point([1, 2]);\n\nturf.booleanContains(line, point);\n//=true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 184,
									"name": "feature1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Feature or Geometry"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 185,
									"name": "feature2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Feature or Geometry"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "compare.ts",
							"line": 28,
							"character": 24
						}
					]
				},
				{
					"id": 186,
					"name": "crosses",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 187,
							"name": "crosses",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Boolean-Crosses returns True if the intersection results in a geometry whose dimension is one less than\nthe maximum dimension of the two source geometries and the intersection set is interior to\nboth source geometries.",
								"text": "Boolean-Crosses returns t (TRUE) for only multipoint/polygon, multipoint/linestring, linestring/linestring, linestring/polygon, and linestring/multipolygon comparisons.\n",
								"returns": "true/false",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line1 = turf.lineString([[-2, 2], [4, 2]]);\nvar line2 = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n\nvar cross = turf.booleanCrosses(line1, line2);\n//=true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 188,
									"name": "feature1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Feature or Geometry"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 189,
									"name": "feature2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Feature or Geometry"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "compare.ts",
							"line": 49,
							"character": 23
						}
					]
				},
				{
					"id": 190,
					"name": "disjoint",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 191,
							"name": "disjoint",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Boolean-disjoint returns (TRUE) if the intersection of the two geometries is an empty set.",
								"returns": "true/false",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar point = turf.point([2, 2]);\nvar line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n\nturf.booleanDisjoint(line, point);\n//=true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 192,
									"name": "feature1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Feature or Geometry"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 193,
									"name": "feature2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Feature or Geometry"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "compare.ts",
							"line": 66,
							"character": 24
						}
					]
				},
				{
					"id": 194,
					"name": "equal",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 195,
							"name": "equal",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Determine whether two geometries of the same type have identical X,Y coordinate values.\nSee http://edndoc.esri.com/arcsde/9.0/general_topics/understand_spatial_relations.htm",
								"returns": "true if the objects are equal, false otherwise",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar pt1 = turf.point([0, 0]);\nvar pt2 = turf.point([0, 0]);\nvar pt3 = turf.point([1, 1]);\n\nturf.booleanEqual(pt1, pt2);\n//= true\nturf.booleanEqual(pt2, pt3);\n//= false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 196,
									"name": "feature1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON input"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 197,
									"name": "feature2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON input"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "compare.ts",
							"line": 87,
							"character": 21
						}
					]
				},
				{
					"id": 203,
					"name": "parallel",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 204,
							"name": "parallel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Boolean-Parallel returns True if each segment of `line1` is parallel to the correspondent segment of `line2`",
								"returns": "true/false if the lines are parallel",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line1 = turf.lineString([[0, 0], [0, 1]]);\nvar line2 = turf.lineString([[1, 0], [1, 1]]);\n\nturf.booleanParallel(line1, line2);\n//=true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 205,
									"name": "line1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Feature or Geometry"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 206,
									"name": "line2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Feature or Geometry"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "compare.ts",
							"line": 130,
							"character": 24
						}
					]
				},
				{
					"id": 198,
					"name": "pointInPolygon",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 199,
							"name": "pointInPolygon",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a Point and a Polygon or MultiPolygon and determines if the point resides inside the polygon. The polygon can\nbe convex or concave. The function accounts for holes.",
								"returns": "`true` if the Point is inside the Polygon; `false` if the Point is not inside the Polygon",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar pt = turf.point([-77, 44]);\nvar poly = turf.polygon([[\n  [-81, 41],\n  [-81, 47],\n  [-72, 47],\n  [-72, 41],\n  [-81, 41]\n]]);\n\nturf.booleanPointInPolygon(pt, poly);\n//= true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 200,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input point"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 201,
									"name": "polygon",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input polygon or multipolygon"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 202,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "compare.ts",
							"line": 113,
							"character": 30
						}
					]
				},
				{
					"id": 207,
					"name": "pointOnLine",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 208,
							"name": "pointOnLine",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if a point is on a line. Accepts a optional parameter to ignore the start and end vertices of the linestring.",
								"returns": "true/false",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar pt = turf.point([0, 0]);\nvar line = turf.lineString([[-1, -1],[1, 1],[1.5, 2.2]]);\nvar isPointOnLine = turf.booleanPointOnLine(pt, line);\n//=true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 209,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Point"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 210,
									"name": "line",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON LineString"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 211,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "compare.ts",
							"line": 148,
							"character": 27
						}
					]
				},
				{
					"id": 212,
					"name": "within",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 213,
							"name": "within",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Boolean-within returns true if the first geometry is completely within the second geometry.\nThe interiors of both geometries must intersect and, the interior and boundary of the primary (geometry a)\nmust not intersect the exterior of the secondary (geometry b).\nBoolean-within returns the exact opposite result of the `@turf/boolean-contains`.",
								"returns": "true/false",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\nvar point = turf.point([1, 2]);\n\nturf.booleanWithin(point, line);\n//=true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 214,
									"name": "feature1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Feature or Geometry"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 215,
									"name": "feature2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Feature or Geometry"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "compare.ts",
							"line": 168,
							"character": 22
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						182,
						186,
						190,
						194,
						203,
						198,
						207,
						212
					]
				}
			],
			"sources": [
				{
					"fileName": "compare.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 216,
			"name": "\"convert\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/convert.ts",
			"comment": {
				"shortText": "Turf FEATURE CONVERSION functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 217,
					"name": "combine",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 218,
							"name": "combine",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Combines a FeatureCollection of Point, LineString, or Polygon features\ninto MultiPoint, MultiLineString, or MultiPolygon features.",
								"returns": "a FeatureCollection of corresponding type to input",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar fc = turf.featureCollection([\n  turf.point([19.026432, 47.49134]),\n  turf.point([19.074497, 47.509548])\n]);\n\nvar combined = turf.combine(fc);\n\n//addToMap\nvar addToMap = [combined]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 219,
									"name": "fcoll",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "a FeatureCollection of any type"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "MultiPoint"
							}
						}
					],
					"sources": [
						{
							"fileName": "convert.ts",
							"line": 30,
							"character": 23
						}
					]
				},
				{
					"id": 220,
					"name": "explode",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 221,
							"name": "explode",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a feature or set of features and returns all positions as Point|points.",
								"returns": "points representing the exploded input features",
								"tags": [
									{
										"tag": "throws",
										"text": "{Error} if it encounters an unknown geometry type"
									},
									{
										"tag": "example",
										"text": "\nvar polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);\n\nvar explode = turf.explode(polygon);\n\n//addToMap\nvar addToMap = [polygon, explode]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 222,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input features"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 223,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 224,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 225,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "convert.ts",
							"line": 48,
							"character": 23
						}
					]
				},
				{
					"id": 226,
					"name": "flatten",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 227,
							"name": "flatten",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Flattens any GeoJSON to a FeatureCollection inspired by [geojson-flatten](https://github.com/tmcw/geojson-flatten).",
								"returns": "all Multi-Geometries are flattened into single Features",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar multiGeometry = turf.multiPolygon([\n  [[[102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0], [102.0, 2.0]]],\n  [[[100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0]],\n  [[100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2]]]\n]);\n\nvar flatten = turf.flatten(multiGeometry);\n\n//addToMap\nvar addToMap = [flatten]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 228,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "any valid GeoJSON Object"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 229,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 230,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 231,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "convert.ts",
							"line": 70,
							"character": 23
						}
					]
				},
				{
					"id": 232,
					"name": "lineToPolygon",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 233,
							"name": "lineToPolygon",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts (Multi)LineString(s) to Polygon(s).",
								"returns": "converted to Polygons",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line = turf.lineString([[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]);\n\nvar polygon = turf.lineToPolygon(line);\n\n//addToMap\nvar addToMap = [polygon];\n"
									}
								]
							},
							"parameters": [
								{
									"id": 234,
									"name": "lines",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Features to convert"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 235,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 236,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 237,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 238,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "convert.ts",
							"line": 91,
							"character": 29
						}
					]
				},
				{
					"id": 245,
					"name": "polygonToLine",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 246,
							"name": "polygonToLine",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts a Polygon to LineString|(Multi)LineString or MultiPolygon to a FeatureCollection of LineString|(Multi)LineString.",
								"returns": "converted (Multi)Polygon to (Multi)LineString",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar poly = turf.polygon([[[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]]);\n\nvar line = turf.polygonToLine(poly);\n\n//addToMap\nvar addToMap = [line];\n"
									}
								]
							},
							"parameters": [
								{
									"id": 247,
									"name": "polygon",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Feature to convert"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 248,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "LineString"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 249,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 250,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 251,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "convert.ts",
							"line": 131,
							"character": 29
						}
					]
				},
				{
					"id": 239,
					"name": "polygonize",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 240,
							"name": "polygonize",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Polygonizes LineString|(Multi)LineString(s)} into Polygons.",
								"text": "Implementation of GEOSPolygonize function (`geos::operation::polygonize::Polygonizer`).\n\nPolygonizes a set of lines that represents edges in a planar graph. Edges must be correctly\nnoded, i.e., they must only meet at their endpoints.\n\nThe implementation correctly handles:\n\n- Dangles: edges which have one or both ends which are not incident on another edge endpoint.\n- Cut Edges (bridges): edges that are connected at both ends but which do not form part of a polygon.\n",
								"returns": "Polygons created",
								"tags": [
									{
										"tag": "throws",
										"text": "{Error} if geoJson is invalid.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 241,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 242,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 243,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 244,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "convert.ts",
							"line": 112,
							"character": 26
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						217,
						220,
						226,
						232,
						245,
						239
					]
				}
			],
			"sources": [
				{
					"fileName": "convert.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 252,
			"name": "\"coords\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/coords.ts",
			"comment": {
				"shortText": "Turf COORDINATE MUTATION functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 253,
					"name": "cleanCoords",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 254,
							"name": "cleanCoords",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes redundant coordinates from any GeoJSON Geometry.",
								"returns": "the cleaned input Feature/Geometry",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line = turf.lineString([[0, 0], [0, 2], [0, 5], [0, 8], [0, 8], [0, 10]]);\nvar multiPoint = turf.multiPoint([[0, 0], [0, 0], [2, 2]]);\n\nturf.cleanCoords(line).geometry.coordinates;\n//= [[0, 0], [0, 10]]\n\nturf.cleanCoords(multiPoint).geometry.coordinates;\n//= [[0, 0], [2, 2]]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 255,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Feature or Geometry"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 256,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "coords.ts",
							"line": 29,
							"character": 27
						}
					]
				},
				{
					"id": 257,
					"name": "flip",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 258,
							"name": "flip",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes input features and flips all of their coordinates from `[x, y]` to `[y, x]`.",
								"returns": "a feature or set of features of the same type as `input` with flipped coordinates",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar serbia = turf.point([20.566406, 43.421008]);\n\nvar saudiArabia = turf.flip(serbia);\n\n//addToMap\nvar addToMap = [serbia, saudiArabia];\n"
									}
								]
							},
							"parameters": [
								{
									"id": 259,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input features"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 260,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "coords.ts",
							"line": 48,
							"character": 20
						}
					]
				},
				{
					"id": 261,
					"name": "getAll",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 262,
							"name": "getAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get all coordinates from any GeoJSON object.",
								"returns": "coordinate position array",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar features = turf.featureCollection([\n  turf.point([26, 37], {foo: 'bar'}),\n  turf.point([36, 53], {hello: 'world'})\n]);\n\nvar coords = turf.coordAll(features);\n//= [[26, 37], [36, 53]]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 263,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "any GeoJSON object"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "array",
									"elementType": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "coords.ts",
							"line": 66,
							"character": 22
						}
					]
				},
				{
					"id": 267,
					"name": "getFromFeature",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 268,
							"name": "getFromFeature",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Unwrap coordinates from a Feature, Geometry Object or an Array of numbers",
								"returns": "coordinates",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);\n\nvar coord = turf.getCoords(poly);\n//= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 269,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Object"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "coords.ts",
							"line": 96,
							"character": 30
						}
					]
				},
				{
					"id": 264,
					"name": "getFromPoint",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 265,
							"name": "getFromPoint",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.",
								"returns": "coordinates",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar pt = turf.point([10, 10]);\n\nvar coord = turf.getCoord(pt);\n//= [10, 10]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 266,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Object"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "coords.ts",
							"line": 81,
							"character": 28
						}
					]
				},
				{
					"id": 270,
					"name": "rewind",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 271,
							"name": "rewind",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Rewind {@link LineString|(Multi)LineString} or {@link Polygon|(Multi)Polygon} outer ring counterclockwise and inner rings clockwise (Uses {@link http://en.wikipedia.org/wiki/Shoelace_formula|Shoelace Formula}).",
								"returns": "rewind Polygon",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar polygon = turf.polygon([[[121, -29], [138, -29], [138, -18], [121, -18], [121, -29]]]);\n\nvar rewind = turf.rewind(polygon);\n\n//addToMap\nvar addToMap = [rewind];\n"
									}
								]
							},
							"parameters": [
								{
									"id": 272,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input GeoJSON Polygon"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 273,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "coords.ts",
							"line": 116,
							"character": 22
						}
					]
				},
				{
					"id": 274,
					"name": "round",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 275,
							"name": "round",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Round number to precision",
								"returns": "rounded number",
								"tags": [
									{
										"tag": "example",
										"text": "\nturf.round(120.4321)\n//=120\n\nturf.round(120.4321, 2)\n//=120.43\n"
									}
								]
							},
							"parameters": [
								{
									"id": 276,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Number"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 277,
									"name": "Precision",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "coords.ts",
							"line": 133,
							"character": 21
						}
					]
				},
				{
					"id": 278,
					"name": "truncate",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 279,
							"name": "truncate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a GeoJSON Feature or FeatureCollection and truncates the precision of the geometry.",
								"returns": "layer with truncated geometry",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar point = turf.point([\n    70.46923055566859,\n    58.11088890802906,\n    1508\n]);\nvar options = {precision: 3, coordinates: 2};\nvar truncated = turf.truncate(point, options);\n//=truncated.geometry.coordinates => [70.469, 58.111]\n\n//addToMap\nvar addToMap = [truncated];\n"
									}
								]
							},
							"parameters": [
								{
									"id": 280,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "any GeoJSON Feature, FeatureCollection, Geometry or GeometryCollection."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 281,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "coords.ts",
							"line": 159,
							"character": 24
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						253,
						257,
						261,
						267,
						264,
						270,
						274,
						278
					]
				}
			],
			"sources": [
				{
					"fileName": "coords.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 282,
			"name": "\"create\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/create.ts",
			"comment": {
				"shortText": "Turf HELPER functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 283,
					"name": "arc",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 284,
							"name": "arc",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a circular arc, of a circle of the given radius and center point, between bearing1 and bearing2;\n0 bearing is North of center point, positive clockwise.",
								"returns": "line arc",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar center = turf.point([-75, 40]);\nvar radius = 5;\nvar bearing1 = 25;\nvar bearing2 = 47;\n\nvar arc = turf.lineArc(center, radius, bearing1, bearing2);\n\n//addToMap\nvar addToMap = [center, arc]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 285,
									"name": "center",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "center point"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 286,
									"name": "radius",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "radius of the circle"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 287,
									"name": "bearing1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "angle, in decimal degrees, of the first radius of the arc"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 288,
									"name": "bearing2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "angle, in decimal degrees, of the second radius of the arc"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 289,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "LineString"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 290,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 291,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 292,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 34,
							"character": 19
						}
					]
				},
				{
					"id": 293,
					"name": "bbox",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 294,
							"name": "bbox",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a set of features, calculates the bbox of all input features, and returns a bounding box.",
								"returns": "bbox extent in [minX, minY, maxX, maxY] order",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);\nvar bbox = turf.bbox(line);\nvar bboxPolygon = turf.bboxPolygon(bbox);\n\n//addToMap\nvar addToMap = [line, bboxPolygon]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 295,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "any GeoJSON object"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "Object"
									},
									{
										"type": "intrinsic",
										"name": "Object"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 51,
							"character": 20
						}
					]
				},
				{
					"id": 296,
					"name": "circle",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 297,
							"name": "circle",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a Point and calculates the circle polygon given a radius in degrees, radians, miles, or kilometers; and steps for precision.",
								"returns": "circle polygon",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar center = [-75.343, 39.984];\nvar radius = 5;\nvar options = {steps: 10, units: 'kilometers', properties: {foo: 'bar'}};\nvar circle = turf.circle(center, radius, options);\n\n//addToMap\nvar addToMap = [turf.point(center), circle]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 298,
									"name": "center",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "center point"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 299,
									"name": "radius",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "radius of the circle"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 300,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 301,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 302,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 303,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 74,
							"character": 22
						}
					]
				},
				{
					"id": 304,
					"name": "fColl",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 305,
							"name": "fColl",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes one or more Feature|Features and creates a FeatureCollection.",
								"returns": "FeatureCollection of Features",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\nvar locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\nvar locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n\nvar collection = turf.featureCollection([\n  locationA,\n  locationB,\n  locationC\n]);\n\n//=collection\n"
									}
								]
							},
							"parameters": [
								{
									"id": 306,
									"name": "features",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input features"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 307,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Geometry"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 308,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 309,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 310,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 99,
							"character": 21
						}
					]
				},
				{
					"id": 311,
					"name": "feature",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 312,
							"name": "feature",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Wraps a GeoJSON Geometry in a GeoJSON Feature.",
								"returns": "a GeoJSON Feature",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar geometry = {\n  \"type\": \"Point\",\n  \"coordinates\": [110, 50]\n};\n\nvar feature = turf.feature(geometry);\n\n//=feature\n"
									}
								]
							},
							"parameters": [
								{
									"id": 313,
									"name": "geometry",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input geometry"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 314,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 122,
							"character": 23
						}
					]
				},
				{
					"id": 315,
					"name": "gColl",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 316,
							"name": "gColl",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a Feature<GeometryCollection> based on a\ncoordinate array. Properties can be added optionally.",
								"returns": "a GeoJSON GeometryCollection Feature",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar pt = {\n    \"type\": \"Point\",\n      \"coordinates\": [100, 0]\n    };\nvar line = {\n    \"type\": \"LineString\",\n    \"coordinates\": [ [101, 0], [102, 1] ]\n  };\nvar collection = turf.geometryCollection([pt, line]);\n\n//=collection\n"
									}
								]
							},
							"parameters": [
								{
									"id": 317,
									"name": "geometries",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "an array of GeoJSON Geometries"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 318,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "GeometryCollection"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 149,
							"character": 21
						}
					]
				},
				{
					"id": 319,
					"name": "lineString",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 320,
							"name": "lineString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a LineString Feature from an Array of Positions.",
								"returns": "LineString Feature",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\nvar linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n\n//=linestring1\n//=linestring2\n"
									}
								]
							},
							"parameters": [
								{
									"id": 321,
									"name": "coordinates",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "an array of Positions"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 322,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "LineString"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 169,
							"character": 26
						}
					]
				},
				{
					"id": 323,
					"name": "mLinestring",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 324,
							"name": "mLinestring",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a Feature<MultiLineString> based on a\ncoordinate array. Properties can be added optionally.",
								"returns": "a MultiLineString feature",
								"tags": [
									{
										"tag": "throws",
										"text": "{Error} if no coordinates are passed"
									},
									{
										"tag": "example",
										"text": "\nvar multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n\n//=multiLine\n"
									}
								]
							},
							"parameters": [
								{
									"id": 325,
									"name": "coordinates",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "an array of LineStrings"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 326,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "MultiLineString"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 189,
							"character": 27
						}
					]
				},
				{
					"id": 327,
					"name": "mPoint",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 328,
							"name": "mPoint",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a Feature<MultiPoint> based on a\ncoordinate array. Properties can be added optionally.",
								"returns": "a MultiPoint feature",
								"tags": [
									{
										"tag": "throws",
										"text": "{Error} if no coordinates are passed"
									},
									{
										"tag": "example",
										"text": "\nvar multiPt = turf.multiPoint([[0,0],[10,10]]);\n\n//=multiPt\n"
									}
								]
							},
							"parameters": [
								{
									"id": 329,
									"name": "coordinates",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "an array of Positions"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 330,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "MultiPoint"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 209,
							"character": 22
						}
					]
				},
				{
					"id": 331,
					"name": "mPolygon",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 332,
							"name": "mPolygon",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a Feature<MultiPolygon> based on a\ncoordinate array. Properties can be added optionally.",
								"returns": "a multipolygon feature",
								"tags": [
									{
										"tag": "throws",
										"text": "{Error} if no coordinates are passed"
									},
									{
										"tag": "example",
										"text": "\nvar multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n\n//=multiPoly\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 333,
									"name": "coordinates",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "an array of Polygons"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 334,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "MultiPolygon"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 230,
							"character": 24
						}
					]
				},
				{
					"id": 335,
					"name": "point",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 336,
							"name": "point",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a Point Feature from a Position.",
								"returns": "a Point feature",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar point = turf.point([-75.343, 39.984]);\n\n//=point\n"
									}
								]
							},
							"parameters": [
								{
									"id": 337,
									"name": "coordinates",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "longitude, latitude position (each in decimal degrees)"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 338,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 248,
							"character": 21
						}
					]
				},
				{
					"id": 339,
					"name": "polygon",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 340,
							"name": "polygon",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a Polygon Feature from an Array of LinearRings.",
								"returns": "Polygon Feature",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n\n//=polygon\n"
									}
								]
							},
							"parameters": [
								{
									"id": 341,
									"name": "coordinates",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "an array of LinearRings"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 342,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 266,
							"character": 23
						}
					]
				},
				{
					"id": 343,
					"name": "sector",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 344,
							"name": "sector",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a circular sector of a circle of given radius and center Point,\nbetween (clockwise) bearing1 and bearing2; 0 bearing is North of center point, positive clockwise.",
								"returns": "sector polygon",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar center = turf.point([-75, 40]);\nvar radius = 5;\nvar bearing1 = 25;\nvar bearing2 = 45;\n\nvar sector = turf.sector(center, radius, bearing1, bearing2);\n\n//addToMap\nvar addToMap = [center, sector];\n"
									}
								]
							},
							"parameters": [
								{
									"id": 345,
									"name": "center",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "center point"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 346,
									"name": "radius",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "radius of the circle"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 347,
									"name": "bearing1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "angle, in decimal degrees, of the first radius of the sector"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 348,
									"name": "bearing2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "angle, in decimal degrees, of the second radius of the sector"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 349,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 350,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 351,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 352,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 293,
							"character": 22
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						283,
						293,
						296,
						304,
						311,
						315,
						319,
						323,
						327,
						331,
						335,
						339,
						343
					]
				}
			],
			"sources": [
				{
					"fileName": "create.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 353,
			"name": "\"feature\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/feature.ts",
			"comment": {
				"shortText": "Turf feature functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 354,
					"name": "buffer",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 355,
							"name": "buffer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Calculates a buffer for input features for a given radius. Units supported are miles, kilometers, and degrees.",
								"text": "When using a negative radius, the resulting geometry may be invalid if\nit's too small compared to the radius magnitude. If the input is a\nFeatureCollection, only valid members will be returned in the output\nFeatureCollection - i.e., the output collection may have fewer members than\nthe input, or even be empty.\n",
								"returns": "buffered features",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar point = turf.point([-90.548630, 14.616599]);\nvar buffered = turf.buffer(point, 500, {units: 'miles'});\n"
									}
								]
							},
							"parameters": [
								{
									"id": 356,
									"name": "features",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input to be buffered"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 357,
									"name": "radius",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "distance to draw the buffer (negative values are allowed)"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 358,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 359,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 360,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 361,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "feature.ts",
							"line": 31,
							"character": 22
						}
					]
				},
				{
					"id": 362,
					"name": "clone",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 363,
							"name": "clone",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a cloned copy of the passed GeoJSON Object, including possible 'Foreign Members'.\n~3-5x faster than the common JSON.parse + JSON.stringify combo method.",
								"returns": "cloned GeoJSON Object",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]], {color: 'red'});\n\nvar lineCloned = turf.clone(line);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 364,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Object"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "feature.ts",
							"line": 46,
							"character": 21
						}
					]
				},
				{
					"id": 365,
					"name": "concave",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 366,
							"name": "concave",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a set of points and returns a concave hull Polygon or MultiPolygon.\nInternally, this uses [turf-tin](https://github.com/Turfjs/turf-tin) to generate geometries.",
								"returns": "a concave hull (null value is returned if unable to compute hull)",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar points = turf.featureCollection([\n  turf.point([-63.601226, 44.642643]),\n  turf.point([-63.591442, 44.651436]),\n  turf.point([-63.580799, 44.648749]),\n  turf.point([-63.573589, 44.641788]),\n  turf.point([-63.587665, 44.64533]),\n  turf.point([-63.595218, 44.64765])\n]);\nvar options = {units: 'miles', maxEdge: 1};\n\nvar hull = turf.concave(points, options);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 367,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input points"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 368,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Polygon"
											},
											{
												"type": "reference",
												"name": "MultiPolygon"
											}
										]
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 369,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 370,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 371,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "feature.ts",
							"line": 72,
							"character": 23
						}
					]
				},
				{
					"id": 372,
					"name": "convex",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 373,
							"name": "convex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a Feature or a FeatureCollection and returns a convex hull Polygon.",
								"text": "Internally this uses\nthe [convex-hull](https://github.com/mikolalysenko/convex-hull) module that\nimplements a [monotone chain hull](http://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain).\n",
								"returns": "a convex hull",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar points = turf.featureCollection([\n  turf.point([10.195312, 43.755225]),\n  turf.point([10.404052, 43.8424511]),\n  turf.point([10.579833, 43.659924]),\n  turf.point([10.360107, 43.516688]),\n  turf.point([10.14038, 43.588348]),\n  turf.point([10.195312, 43.755225])\n]);\n\nvar hull = turf.convex(points);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 374,
									"name": "features",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input Feature or FeatureCollection"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 375,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 376,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 377,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 378,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "feature.ts",
							"line": 99,
							"character": 22
						}
					]
				},
				{
					"id": 379,
					"name": "dissolve",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isPrivate": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 380,
							"name": "dissolve",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isPrivate": true
							},
							"comment": {
								"shortText": "Transform function: attempts to dissolve geojson objects where possible\n[GeoJSON] -> GeoJSON geometry",
								"returns": "Dissolved Features\n"
							},
							"parameters": [
								{
									"id": 381,
									"name": "features",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Features to dissolved"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 382,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 383,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 384,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 385,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "feature.ts",
							"line": 113,
							"character": 24
						}
					]
				},
				{
					"id": 386,
					"name": "getGeom",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 387,
							"name": "getGeom",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get Geometry from Feature or Geometry Object",
								"returns": "GeoJSON Geometry Object",
								"tags": [
									{
										"tag": "throws",
										"text": "{Error} if geojson is not a Feature or Geometry Object"
									},
									{
										"tag": "example",
										"text": "\nvar point = {\n  \"type\": \"Feature\",\n  \"properties\": {},\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [110, 40]\n  }\n}\nvar geom = turf.getGeom(point)\n//={\"type\": \"Point\", \"coordinates\": [110, 40]}\n"
									}
								]
							},
							"parameters": [
								{
									"id": 388,
									"name": "feature",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Feature or Geometry Object"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "feature.ts",
							"line": 135,
							"character": 23
						}
					]
				},
				{
					"id": 389,
					"name": "getType",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 390,
							"name": "getType",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get GeoJSON object's type, Geometry type is prioritize.",
								"returns": "GeoJSON type",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar point = {\n  \"type\": \"Feature\",\n  \"properties\": {},\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [110, 40]\n  }\n}\nvar geom = turf.getType(point)\n//=\"Point\"\n"
									}
								]
							},
							"parameters": [
								{
									"id": 391,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON object"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "Point"
									},
									{
										"type": "stringLiteral",
										"value": "LineString"
									},
									{
										"type": "stringLiteral",
										"value": "Polygon"
									},
									{
										"type": "stringLiteral",
										"value": "MultiPoint"
									},
									{
										"type": "stringLiteral",
										"value": "MultiLineString"
									},
									{
										"type": "stringLiteral",
										"value": "MultiPolygon"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "feature.ts",
							"line": 156,
							"character": 23
						}
					]
				},
				{
					"id": 392,
					"name": "pointOn",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 393,
							"name": "pointOn",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a Feature or FeatureCollection and returns a Point guaranteed to be on the surface of the feature.",
								"text": "* Given a {@link Polygon}, the point will be in the area of the polygon\n* Given a {@link LineString}, the point will be along the string\n* Given a {@link Point}, the point will the same as the input\n",
								"returns": "a point on the surface of `input`",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar polygon = turf.polygon([[\n  [116, -36],\n  [131, -32],\n  [146, -43],\n  [155, -25],\n  [133, -9],\n  [111, -22],\n  [116, -36]\n]]);\n\nvar pointOnPolygon = turf.pointOnFeature(polygon);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 394,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "any Feature or FeatureCollection"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 395,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 396,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 397,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "feature.ts",
							"line": 182,
							"character": 23
						}
					]
				},
				{
					"id": 398,
					"name": "simplify",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 399,
							"name": "simplify",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a GeoJSON object and returns a simplified version. Internally uses\n[simplify-js](http://mourner.github.io/simplify-js/) to perform simplification using the Ramer-Douglas-Peucker algorithm.",
								"returns": "a simplified GeoJSON",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar geojson = turf.polygon([[\n  [-70.603637, -33.399918],\n  [-70.614624, -33.395332],\n  [-70.639343, -33.392466],\n  [-70.659942, -33.394759],\n  [-70.683975, -33.404504],\n  [-70.697021, -33.419406],\n  [-70.701141, -33.434306],\n  [-70.700454, -33.446339],\n  [-70.694274, -33.458369],\n  [-70.682601, -33.465816],\n  [-70.668869, -33.472117],\n  [-70.646209, -33.473835],\n  [-70.624923, -33.472117],\n  [-70.609817, -33.468107],\n  [-70.595397, -33.458369],\n  [-70.587158, -33.442901],\n  [-70.587158, -33.426283],\n  [-70.590591, -33.414248],\n  [-70.594711, -33.406224],\n  [-70.603637, -33.399918]\n]]);\nvar options = {tolerance: 0.01, highQuality: false};\nvar simplified = turf.simplify(geojson, options);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 400,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "object to be simplified"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 401,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "feature.ts",
							"line": 222,
							"character": 24
						}
					]
				},
				{
					"id": 402,
					"name": "tesselate",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 403,
							"name": "tesselate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Tesselates a Polygon into a FeatureCollection of triangular polygons\nusing [earcut](https://github.com/mapbox/earcut).",
								"returns": "a geometrycollection feature",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar poly = turf.polygon([[[11, 0], [22, 4], [31, 0], [31, 11], [21, 15], [11, 11], [11, 0]]]);\nvar triangles = turf.tesselate(poly);\n\n//addToMap\nvar addToMap = [poly, triangles]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 404,
									"name": "poly",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the polygon to tesselate"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 405,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 406,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 407,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "feature.ts",
							"line": 239,
							"character": 25
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						354,
						362,
						365,
						372,
						379,
						386,
						389,
						392,
						398,
						402
					]
				}
			],
			"sources": [
				{
					"fileName": "feature.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 408,
			"name": "\"grids\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/grids.ts",
			"comment": {
				"shortText": "Turf GRIDS functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 409,
					"name": "hexGrid",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 410,
							"name": "hexGrid",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a bounding box and the diameter of the cell and returns a FeatureCollection of flat-topped\nhexagons or triangles (Polygon features) aligned in an \"odd-q\" vertical grid as\ndescribed in [Hexagonal Grids](http://www.redblobgames.com/grids/hexagons/).",
								"returns": "a hexagonal grid",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar bbox = [-96,31,-84,40];\nvar cellSide = 50;\nvar options = {units: 'miles'};\n\nvar hexgrid = turf.hexGrid(bbox, cellSide, options);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 411,
									"name": "bbox",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "extent in [minX, minY, maxX, maxY] order"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 412,
									"name": "cellSide",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "length of the side of the the hexagons or triangles, in units. It will also coincide with the\nradius of the circumcircle of the hexagons."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 413,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 414,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 415,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 416,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "grids.ts",
							"line": 33,
							"character": 23
						}
					]
				},
				{
					"id": 417,
					"name": "pointGrid",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 418,
							"name": "pointGrid",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a Point grid from a bounding box (with optional polygon mask).",
								"returns": "grid of points",
								"tags": [
									{
										"tag": "name",
										"text": "pointGrid"
									},
									{
										"tag": "example",
										"text": "\nvar extent = [-70.823364, -33.553984, -70.473175, -33.302986];\nvar cellSide = 3;\nvar options = {units: 'miles'};\n\nvar grid = turf.pointGrid(extent, cellSide, options);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 419,
									"name": "bbox",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "extent in [minX, minY, maxX, maxY] order"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 420,
									"name": "cellSide",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the distance between points, in units"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 421,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 422,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 423,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 424,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "grids.ts",
							"line": 55,
							"character": 25
						}
					]
				},
				{
					"id": 425,
					"name": "squareGrid",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 426,
							"name": "squareGrid",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a square grid from a bounding box (with optional polygon mask).",
								"returns": "grid a grid of polygons",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar bbox = [-95, 30 ,-85, 40];\nvar cellSide = 50;\nvar options = {units: 'miles'};\n\nvar squareGrid = turf.squareGrid(bbox, cellSide, options);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 427,
									"name": "bbox",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "extent in [minX, minY, maxX, maxY] order"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 428,
									"name": "cellSide",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "of each cell, in units"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 429,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 430,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 431,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 432,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "grids.ts",
							"line": 76,
							"character": 26
						}
					]
				},
				{
					"id": 433,
					"name": "triangleGrid",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 434,
							"name": "triangleGrid",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a bounding box and a cell depth and returns a set of triangular polygons in a grid.",
								"returns": "grid of polygons",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar bbox = [-95, 30 ,-85, 40];\nvar cellSide = 50;\nvar options = {units: 'miles'};\n\nvar triangleGrid = turf.triangleGrid(bbox, cellSide, options);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 435,
									"name": "bbox",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "extent in [minX, minY, maxX, maxY] order"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 436,
									"name": "cellSide",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "dimension of each cell"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 437,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 438,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 439,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 440,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "grids.ts",
							"line": 97,
							"character": 28
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						409,
						417,
						425,
						433
					]
				}
			],
			"sources": [
				{
					"fileName": "grids.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 441,
			"name": "\"ipolate\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/ipolate.ts",
			"comment": {
				"shortText": "Turf INTERPOLATION functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 442,
					"name": "interpolate",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 443,
							"name": "interpolate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a set of points and estimates their 'property' values on a grid using the [Inverse Distance Weighting (IDW) method](https://en.wikipedia.org/wiki/Inverse_distance_weighting).",
								"returns": "grid of points or polygons with interpolated 'property'",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar points = turf.randomPoint(30, {bbox: [50, 30, 70, 50]});\n\n// add a random property to each point\nturf.featureEach(points, function(point) {\n    point.properties.solRad = Math.random() * 50;\n});\nvar options = {gridType: 'points', property: 'solRad', units: 'miles'};\nvar grid = turf.interpolate(points, 100, options);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 444,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "with known value"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 445,
									"name": "cellSize",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the distance across each grid point"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 446,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 447,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 448,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 449,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ipolate.ts",
							"line": 33,
							"character": 27
						}
					]
				},
				{
					"id": 450,
					"name": "isobands",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 451,
							"name": "isobands",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a grid FeatureCollection of Point features with z-values and an array of\nvalue breaks and generates filled contour isobands.",
								"returns": "a FeatureCollection of MultiPolygon features representing isobands\n"
							},
							"parameters": [
								{
									"id": 452,
									"name": "pointGrid",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input points"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 453,
									"name": "breaks",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "where to draw contours"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 454,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "MultiPolygon"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 455,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 456,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 457,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ipolate.ts",
							"line": 49,
							"character": 24
						}
					]
				},
				{
					"id": 458,
					"name": "isolines",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 459,
							"name": "isolines",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a grid FeatureCollection of Point features with z-values and an array of\nvalue breaks and generates [isolines](http://en.wikipedia.org/wiki/Isoline).",
								"returns": "a FeatureCollection of MultiLineString features representing isolines",
								"tags": [
									{
										"tag": "example",
										"text": "\n// create a grid of points with random z-values in their properties\nvar extent = [0, 30, 20, 50];\nvar cellWidth = 100;\nvar pointGrid = turf.pointGrid(extent, cellWidth, {units: 'miles'});\n\nfor (var i = 0; i < pointGrid.features.length; i++) {\n    pointGrid.features[i].properties.temperature = Math.random() * 10;\n}\nvar breaks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nvar lines = turf.isolines(pointGrid, breaks, {zProperty: 'temperature'});\n"
									}
								]
							},
							"parameters": [
								{
									"id": 460,
									"name": "pointGrid",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input points"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 461,
									"name": "breaks",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "values of `zProperty` where to draw isolines"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 462,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "MultiLineString"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 463,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 464,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 465,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ipolate.ts",
							"line": 78,
							"character": 24
						}
					]
				},
				{
					"id": 466,
					"name": "planepoint",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 467,
							"name": "planepoint",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a triangular plane as a Polygon\nand a Point within that triangle and returns the z-value\nat that point. The Polygon should have properties `a`, `b`, and `c`\nthat define the values at its three corners. Alternatively, the z-values\nof each triangle point can be provided by their respective 3rd coordinate\nif their values are not provided as properties.",
								"returns": "the z-value for `interpolatedPoint`",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar point = turf.point([-75.3221, 39.529]);\n// \"a\", \"b\", and \"c\" values represent the values of the coordinates in order.\nvar triangle = turf.polygon([[\n  [-75.1221, 39.57],\n  [-75.58, 39.18],\n  [-75.97, 39.86],\n  [-75.1221, 39.57]\n]], {\n  \"a\": 11,\n  \"b\": 122,\n  \"c\": 44\n});\n\nvar zValue = turf.planepoint(point, triangle);\npoint.properties.zValue = zValue;\n"
									}
								]
							},
							"parameters": [
								{
									"id": 468,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the Point for which a z-value will be calculated"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 469,
									"name": "triangle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "a Polygon feature with three vertices"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "ipolate.ts",
							"line": 110,
							"character": 26
						}
					]
				},
				{
					"id": 470,
					"name": "tin",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 471,
							"name": "tin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a set of points and creates a\n[Triangulated Irregular Network](http://en.wikipedia.org/wiki/Triangulated_irregular_network),\nor a TIN for short, returned as a collection of Polygons. These are often used\nfor developing elevation contour maps or stepped heat visualizations.",
								"text": "If an optional z-value property is provided then it is added as properties called `a`, `b`,\nand `c` representing its value at each of the points that represent the corners of the\ntriangle.\n",
								"returns": "TIN output",
								"tags": [
									{
										"tag": "example",
										"text": "\n// generate some random point data\nvar points = turf.randomPoint(30, {bbox: [50, 30, 70, 50]});\n\n// add a random property to each point between 0 and 9\nfor (var i = 0; i < points.features.length; i++) {\n  points.features[i].properties.z = ~~(Math.random() * 9);\n}\nvar tin = turf.tin(points, 'z');\n\n//addToMap\nvar addToMap = [tin, points]\nfor (var i = 0; i < tin.features.length; i++) {\n  var properties  = tin.features[i].properties;\n  properties.fill = '#' + properties.a + properties.b + properties.c;\n}\n"
									}
								]
							},
							"parameters": [
								{
									"id": 472,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input points"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 473,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 474,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 475,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 476,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ipolate.ts",
							"line": 145,
							"character": 19
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						442,
						450,
						458,
						466,
						470
					]
				}
			],
			"sources": [
				{
					"fileName": "ipolate.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 477,
			"name": "\"joins\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/joins.ts",
			"comment": {
				"shortText": "Turf JOINS functions.\nhttp://turfjs.org/docs/"
			},
			"sources": [
				{
					"fileName": "joins.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 478,
			"name": "\"line\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/line.ts",
			"comment": {
				"shortText": "Turf line functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 479,
					"name": "along",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 480,
							"name": "along",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a LineString and returns a Point at a specified distance along the line.",
								"returns": "Point `distance` `units` along the line",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line = turf.lineString([[-83, 30], [-84, 36], [-78, 41]]);\nvar options = {units: 'miles'};\n\nvar along = turf.along(line, 200, options);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 481,
									"name": "line",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input line"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 482,
									"name": "distance",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "distance along the line"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 483,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 484,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 485,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 486,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "line.ts",
							"line": 26,
							"character": 21
						}
					]
				},
				{
					"id": 487,
					"name": "bezierSpline",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 488,
							"name": "bezierSpline",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a LineString and returns a curved version\nby applying a [Bezier spline](http://en.wikipedia.org/wiki/B%C3%A9zier_spline)\nalgorithm.",
								"text": "The bezier spline implementation is by [Leszek Rybicki](http://leszek.rybicki.cc/).\n",
								"returns": "curved line",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line = turf.lineString([\n  [-76.091308, 18.427501],\n  [-76.695556, 18.729501],\n  [-76.552734, 19.40443],\n  [-74.61914, 19.134789],\n  [-73.652343, 20.07657],\n  [-73.157958, 20.210656]\n]);\n\nvar curved = turf.bezierSpline(line);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 489,
									"name": "line",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input LineString"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 490,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "LineString"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 491,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 492,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 493,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "line.ts",
							"line": 54,
							"character": 28
						}
					]
				},
				{
					"id": 494,
					"name": "chunk",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 495,
							"name": "chunk",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Divides a LineString into chunks of a specified length.\nIf the line is shorter than the segment length then the original line is returned.",
								"returns": "collection of line segments",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line = turf.lineString([[-95, 40], [-93, 45], [-85, 50]]);\n\nvar chunk = turf.lineChunk(line, 15, {units: 'miles'});\n"
									}
								]
							},
							"parameters": [
								{
									"id": 496,
									"name": "lines",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the lines to split"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 497,
									"name": "segmentLength",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "how long to make each segment"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 498,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "LineString"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 499,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 500,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 501,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "line.ts",
							"line": 73,
							"character": 21
						}
					]
				},
				{
					"id": 502,
					"name": "intersect",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 503,
							"name": "intersect",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes any LineString or Polygon GeoJSON and returns the intersecting point(s).",
								"returns": "point(s) that intersect both",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line1 = turf.lineString([[126, -11], [129, -21]]);\nvar line2 = turf.lineString([[123, -18], [131, -14]]);\nvar intersects = turf.lineIntersect(line1, line2);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 504,
									"name": "line1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "any LineString or Polygon"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 505,
									"name": "line2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "any LineString or Polygon"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 506,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 507,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 508,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "line.ts",
							"line": 88,
							"character": 25
						}
					]
				},
				{
					"id": 509,
					"name": "offset",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 510,
							"name": "offset",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a LineString and returns a LineString offset by the specified distance.",
								"returns": "Line offset from the input line",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line = turf.lineString([[-83, 30], [-84, 36], [-78, 41]], { \"stroke\": \"#F00\" });\n\nvar offsetLine = turf.lineOffset(line, 2, {units: 'miles'});\n"
									}
								]
							},
							"parameters": [
								{
									"id": 511,
									"name": "line",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input GeoJSON"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 512,
									"name": "distance",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "distance to offset the line (can be of negative value)"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 513,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 514,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 515,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 516,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "line.ts",
							"line": 105,
							"character": 22
						}
					]
				},
				{
					"id": 517,
					"name": "overlap",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 518,
							"name": "overlap",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes any LineString or Polygon and returns the overlapping lines between both features.",
								"returns": "lines(s) that are overlapping between both features",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line1 = turf.lineString([[115, -35], [125, -30], [135, -30], [145, -35]]);\nvar line2 = turf.lineString([[115, -25], [125, -30], [135, -30], [145, -25]]);\n\nvar overlapping = turf.lineOverlap(line1, line2);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 519,
									"name": "line1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "any LineString or Polygon"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 520,
									"name": "line2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "any LineString or Polygon"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 521,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "LineString"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 522,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 523,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 524,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "line.ts",
							"line": 123,
							"character": 23
						}
					]
				},
				{
					"id": 525,
					"name": "segment",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 526,
							"name": "segment",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a FeatureCollection of 2-vertex LineString segments from a LineString or Polygon.",
								"returns": "2-vertex line segments",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\nvar segments = turf.lineSegment(polygon);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 527,
									"name": "feature",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polygon or LineString"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "LineString"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 528,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 529,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 530,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "line.ts",
							"line": 136,
							"character": 23
						}
					]
				},
				{
					"id": 531,
					"name": "slice",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 532,
							"name": "slice",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes aLineString, a start Point, and a stop point\nand returns a subsection of the line in-between those points.\nThe start & stop points don't need to fall exactly on the line.",
								"text": "This can be useful for extracting only the part of a route between waypoints.\n",
								"returns": "sliced line",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line = turf.lineString([\n    [-77.031669, 38.878605],\n    [-77.029609, 38.881946],\n    [-77.020339, 38.884084],\n    [-77.025661, 38.885821],\n    [-77.021884, 38.889563],\n    [-77.019824, 38.892368]\n]);\nvar start = turf.point([-77.029609, 38.881946]);\nvar stop = turf.point([-77.021884, 38.889563]);\n\nvar sliced = turf.lineSlice(start, stop, line);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 533,
									"name": "startPt",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "starting point"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 534,
									"name": "stopPt",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "stopping point"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 535,
									"name": "line",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "line to slice"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "LineString"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 536,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 537,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 538,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "line.ts",
							"line": 165,
							"character": 21
						}
					]
				},
				{
					"id": 539,
					"name": "sliceAlong",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 540,
							"name": "sliceAlong",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a LineString, a specified distance along the line to a start Point,\nand a specified  distance along the line to a stop point\nand returns a subsection of the line in-between those points.",
								"text": "This can be useful for extracting only the part of a route between two distances.\n",
								"returns": "sliced line",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line = turf.lineString([[7, 45], [9, 45], [14, 40], [14, 41]]);\nvar start = 12.5;\nvar stop = 25;\nvar sliced = turf.lineSliceAlong(line, start, stop, {units: 'miles'});\n"
									}
								]
							},
							"parameters": [
								{
									"id": 541,
									"name": "line",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input line"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 542,
									"name": "startDist",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "distance along the line to starting point"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 543,
									"name": "stopDist",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "distance along the line to ending point"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 544,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "LineString"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 545,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 546,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 547,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "line.ts",
							"line": 188,
							"character": 26
						}
					]
				},
				{
					"id": 548,
					"name": "split",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 549,
							"name": "split",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Split a LineString by another GeoJSON Feature.",
								"returns": "Split LineStrings",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar line = turf.lineString([[120, -25], [145, -25]]);\nvar splitter = turf.lineString([[130, -15], [130, -35]]);\n\nvar split = turf.lineSplit(line, splitter);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 550,
									"name": "line",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "LineString Feature to split"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 551,
									"name": "splitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Feature used to split line"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 552,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 553,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 554,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "line.ts",
							"line": 204,
							"character": 21
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						479,
						487,
						494,
						502,
						509,
						517,
						525,
						531,
						539,
						548
					]
				}
			],
			"sources": [
				{
					"fileName": "line.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 555,
			"name": "\"misc\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/misc.ts",
			"comment": {
				"shortText": "Turf MISC functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 582,
					"name": "isClockwise",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 583,
							"name": "isClockwise",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a ring and return true or false whether or not the ring is clockwise or counter-clockwise.",
								"returns": "true/false",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar clockwiseRing = turf.lineString([[0,0],[1,1],[1,0],[0,0]]);\nvar counterClockwiseRing = turf.lineString([[0,0],[1,0],[1,1],[0,0]]);\n\nturf.booleanClockwise(clockwiseRing)\n//=true\nturf.booleanClockwise(counterClockwiseRing)\n//=false\n"
									}
								]
							},
							"parameters": [
								{
									"id": 584,
									"name": "line",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "to be evaluated"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "misc.ts",
							"line": 93,
							"character": 27
						}
					]
				},
				{
					"id": 556,
					"name": "kinks",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 557,
							"name": "kinks",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a linestring, multi-linestring, multi-polygon, or polygon and returns points at all self-intersections.",
								"returns": "self-intersections",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar poly = turf.polygon([[\n  [-12.034835, 8.901183],\n  [-12.060413, 8.899826],\n  [-12.03638, 8.873199],\n  [-12.059383, 8.871418],\n  [-12.034835, 8.901183]\n]]);\n\nvar kinks = turf.kinks(poly);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 558,
									"name": "feature",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input feature"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 559,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 560,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 561,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "misc.ts",
							"line": 28,
							"character": 21
						}
					]
				},
				{
					"id": 562,
					"name": "mask",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 563,
							"name": "mask",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes any type of polygon and an optional mask and returns a polygon exterior ring with holes.",
								"returns": "Masked Polygon (exterior ring with holes).",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar polygon = turf.polygon([[[112, -21], [116, -36], [146, -39], [153, -24], [133, -10], [112, -21]]]);\nvar mask = turf.polygon([[[90, -55], [170, -55], [170, 10], [90, 10], [90, -55]]]);\n\nvar masked = turf.mask(polygon, mask);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 564,
									"name": "polygon",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Polygon used as interior rings or holes."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 565,
									"name": "mask",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Feature",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 566,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 567,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 568,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "misc.ts",
							"line": 44,
							"character": 20
						}
					]
				},
				{
					"id": 575,
					"name": "sample",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 576,
							"name": "sample",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a FeatureCollection and returns a FeatureCollection with given number of features at random.",
								"returns": "a FeatureCollection with `n` features",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar points = turf.randomPoint(100, {bbox: [-80, 30, -60, 60]});\n\nvar sample = turf.sample(points, 5);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 577,
									"name": "fcoll",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "FeatureCollection of input features"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 578,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "number of features to select"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "GeometryObject"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 579,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 580,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 581,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "misc.ts",
							"line": 75,
							"character": 22
						}
					]
				},
				{
					"id": 569,
					"name": "unkinkPolygon",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 570,
							"name": "unkinkPolygon",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Takes a kinked polygon and returns a feature collection of polygons that have no kinks.\nUses [simplepolygon](https://github.com/mclaeysb/simplepolygon) internally.",
								"returns": "Unkinked polygons",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar poly = turf.polygon([[[0, 0], [2, 0], [0, 2], [2, 2], [0, 0]]]);\n\nvar result = turf.unkinkPolygon(poly);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 571,
									"name": "polygon",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON Polygon or MultiPolygon"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 572,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 573,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 574,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "misc.ts",
							"line": 59,
							"character": 29
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						582,
						556,
						562,
						575,
						569
					]
				}
			],
			"sources": [
				{
					"fileName": "misc.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 585,
			"name": "\"prop\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/prop.ts",
			"comment": {
				"shortText": "Turf property functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 586,
					"name": "collect",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 587,
							"name": "collect",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Merges a specified property from a FeatureCollection of points into a\nFeatureCollection of polygons. Given an `inProperty` on points and an `outProperty`\nfor polygons, this finds every point that lies within each polygon, collects the\n`inProperty` values from those points, and adds them as an array to `outProperty`\non the polygon.",
								"returns": "polygons with properties listed based on `outField`",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar poly1 = turf.polygon([[[0,0],[10,0],[10,10],[0,10],[0,0]]]);\nvar poly2 = turf.polygon([[[10,0],[20,10],[20,20],[20,0],[10,0]]]);\nvar polyFC = turf.featureCollection([poly1, poly2]);\nvar pt1 = turf.point([5,5], {population: 200});\nvar pt2 = turf.point([1,3], {population: 600});\nvar pt3 = turf.point([14,2], {population: 100});\nvar pt4 = turf.point([13,1], {population: 200});\nvar pt5 = turf.point([19,7], {population: 300});\nvar pointFC = turf.featureCollection([pt1, pt2, pt3, pt4, pt5]);\nvar collected = turf.collect(polyFC, pointFC, 'population', 'values');\nvar values = collected.features[0].properties.values\n//=values => [200, 600]\n\n//addToMap\nvar addToMap = [pointFC, collected]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 588,
									"name": "polygons",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "polygons with values on which to aggregate"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 589,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "points to be aggregated"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 590,
									"name": "inProperty",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "property to be nested from"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 591,
									"name": "outProperty",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "property to be nested into"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Polygon"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 592,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 593,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 594,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "prop.ts",
							"line": 41,
							"character": 23
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						586
					]
				}
			],
			"sources": [
				{
					"fileName": "prop.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 595,
			"name": "\"rand\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/rand.ts",
			"comment": {
				"shortText": "Turf RANDOM functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 606,
					"name": "linestring",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 607,
							"name": "linestring",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a random linestring.",
								"returns": "GeoJSON FeatureCollection of points",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar lineStrings = turf.randomLineString(25, {bbox: [-180, -90, 180, 90]})\n//=lineStrings\n"
									}
								]
							},
							"parameters": [
								{
									"id": 608,
									"name": "number",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 609,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "LineString"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 610,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 611,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 612,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "rand.ts",
							"line": 53,
							"character": 26
						}
					]
				},
				{
					"id": 599,
					"name": "point",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 600,
							"name": "point",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a random point.",
								"returns": "GeoJSON FeatureCollection of points",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar points = turf.randomPoint(25, {bbox: [-180, -90, 180, 90]})\n//=points\n"
									}
								]
							},
							"parameters": [
								{
									"id": 601,
									"name": "number",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 602,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 603,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 604,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 605,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "rand.ts",
							"line": 35,
							"character": 21
						}
					]
				},
				{
					"id": 613,
					"name": "polygon",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 614,
							"name": "polygon",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a random polygon.",
								"returns": "GeoJSON FeatureCollection of points",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar polygons = turf.randomPolygon(25, {bbox: [-180, -90, 180, 90]})\n//=polygons\n"
									}
								]
							},
							"parameters": [
								{
									"id": 615,
									"name": "number",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 616,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FeatureCollection",
								"typeArguments": [
									{
										"type": "reference",
										"name": "LineString"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 617,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 618,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 619,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "rand.ts",
							"line": 70,
							"character": 23
						}
					]
				},
				{
					"id": 596,
					"name": "position",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 597,
							"name": "position",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a random position within a bounding box.",
								"returns": "Position [longitude, latitude]",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar position = turf.randomPosition([-180, -90, 180, 90])\n//=position\n"
									}
								]
							},
							"parameters": [
								{
									"id": 598,
									"name": "bbox",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "rand.ts",
							"line": 20,
							"character": 24
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						606,
						599,
						613,
						596
					]
				}
			],
			"sources": [
				{
					"fileName": "rand.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 620,
			"name": "\"test_data\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/test_data.ts",
			"children": [
				{
					"id": 621,
					"name": "testData1",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 622,
							"name": "testData1",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "FeatureCollection"
							}
						}
					],
					"sources": [
						{
							"fileName": "test_data.ts",
							"line": 6,
							"character": 25
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						621
					]
				}
			],
			"sources": [
				{
					"fileName": "test_data.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 623,
			"name": "\"units\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/units.ts",
			"comment": {
				"shortText": "Turf UNIT CONVERSION functions.\nhttp://turfjs.org/docs/"
			},
			"sources": [
				{
					"fileName": "units.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 624,
			"name": "\"xform\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-turf/src/typescript/xform.ts",
			"comment": {
				"shortText": "Turf TRANSFORMATION functions.\nhttp://turfjs.org/docs/"
			},
			"children": [
				{
					"id": 625,
					"name": "rotate",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 626,
							"name": "rotate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Rotates any geojson Feature or Geometry of a specified angle, around its `centroid` or a given `pivot` point;\nall rotations follow the right-hand rule: https://en.wikipedia.org/wiki/Right-hand_rule",
								"returns": "the rotated GeoJSON feature",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\nvar options = {pivot: [0, 25]};\nvar rotatedPoly = turf.transformRotate(poly, 10, options);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 627,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "object to be rotated"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 628,
									"name": "angle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "of rotation (along the vertical axis), from North in decimal degrees, negative clockwise"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 629,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "xform.ts",
							"line": 27,
							"character": 22
						}
					]
				},
				{
					"id": 636,
					"name": "scale",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 637,
							"name": "scale",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Scale a GeoJSON from a given point by a factor of scaling (ex: factor=2 would make the GeoJSON 200% larger).\nIf a FeatureCollection is provided, the origin point will be calculated based on each individual Feature.",
								"returns": "scaled GeoJSON",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\nvar scaledPoly = turf.transformScale(poly, 3);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 638,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "GeoJSON to be scaled"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 639,
									"name": "factor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "of scaling, positive or negative values greater than 0"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 640,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "xform.ts",
							"line": 65,
							"character": 21
						}
					]
				},
				{
					"id": 630,
					"name": "translate",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 631,
							"name": "translate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Moves any geojson Feature or Geometry of a specified distance along a Rhumb Line\non the provided direction angle.",
								"returns": "the translated GeoJSON object",
								"tags": [
									{
										"tag": "example",
										"text": "\nvar poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\nvar translatedPoly = turf.transformTranslate(poly, 100, 35);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 632,
									"name": "geojson",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "object to be translated"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 633,
									"name": "distance",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "length of the motion; negative values determine motion in opposite direction"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 634,
									"name": "direction",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "of the motion; angle from North in decimal degrees, positive clockwise"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 635,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "xform.ts",
							"line": 47,
							"character": 25
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						625,
						636,
						630
					]
				}
			],
			"sources": [
				{
					"fileName": "xform.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				641,
				1,
				2,
				19,
				40,
				164,
				181,
				216,
				252,
				282,
				353,
				408,
				441,
				477,
				478,
				555,
				585,
				595,
				620,
				623,
				624
			]
		}
	]
}